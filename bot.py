import telebot
import os
import random
import logging
import sqlite3
import csv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
from datetime import datetime
import re

API_TOKEN = os.getenv('TELEGRAM_TOKEN') or '7675723384:AAH6U5eib6lC82AOlfeHDA55aEPBfENerLg'
bot = telebot.TeleBot(API_TOKEN)

# --- –£–∫–∞–∑–∞—Ç—å username —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ ---
BOT_USERNAME = 'Gorod_budushego_bot'  # –ó–ê–ú–ï–ù–ò –Ω–∞ username —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ @

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[logging.FileHandler('bot.log', encoding='utf-8'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

users = {}
tasks = [
    {'id': 1, 'name': '–ü–æ–¥–ø–∏—à–∏—Å—å (–ê–ß –∏ –ù–æ–≤—ã–µ –ª—é–¥–∏)', 'reward': 10},
    {'id': 2, 'name': '–õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç/–≤–∏–¥–µ–æ', 'reward': 5},
    {'id': 3, 'name': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É/–≤–∏–¥–µ–æ', 'reward': 7},
    {'id': 4, 'name': '–í—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç', 'reward': 15},
    {'id': 5, 'name': '–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏', 'reward': 20},
    {'id': 7, 'name': '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', 'reward': 8},
    {'id': 8, 'name': '–ù–∞–π–¥–∏ –∞–≥–∏—Ç–º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å—Ñ–æ—Ç–∫–∞–π—Å—è', 'reward': 12},
    {'id': 9, 'name': '–¶–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ñ–æ—Ç–∫–∞—Ç—å—Å—è —Å —Ü–≤–µ—Ç–æ–º)', 'reward': 10},
    {'id': 10, 'name': '–ü–æ–≤–µ—Å–∏—Ç—å –Ω–∞–±–æ–ª–∫–æ–Ω–Ω–∏–∫ –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'reward': 30},
    {'id': 11, 'name': '–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å', 'reward': 10},
    {'id': 12, 'name': '–ü—Ä–∏–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ¬´–ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ¬ª', 'reward': 20},
    {'id': 13, 'name': '–°–Ω—è—Ç—å —Ä–∏–ª—Å –ø—Ä–æ 100 —Ä–µ—à–µ–Ω–∏–π –æ—Ç –ù–õ', 'reward': 25},
]
prizes = [
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'cost': 1290},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', 'cost': 1790},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', 'cost': 2990},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 1300},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 1300},
    {'name': '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞)', 'cost': 0},
]
GROUP_ID = -1002519704761
TOPIC_ID = 3
admin_id = 790005263 # —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–π user_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_messages = []

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ (in-memory, –Ω–∞ —Å–µ—Å—Å–∏—é) ---
admin_states = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            full_name TEXT,
            age INTEGER,
            city TEXT,
            balance INTEGER DEFAULT 0,
            ref_code TEXT,
            invited_by TEXT,
            ref_friends TEXT,
            ref_progress TEXT,
            username TEXT,
            last_daily TEXT,
            tasks_done TEXT
        )''')
        try:
            c.execute('ALTER TABLE users ADD COLUMN username TEXT')
        except Exception:
            pass
        try:
            c.execute('ALTER TABLE users ADD COLUMN last_daily TEXT')
        except Exception:
            pass
        # --- –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è ---
        c.execute('''CREATE TABLE IF NOT EXISTS pending_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            task_id INTEGER,
            proof_type TEXT,
            proof_data TEXT,
            status TEXT
        )''')
        conn.commit()

init_db()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_user(user_id, username=None):
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
        row = c.fetchone()
        if not row:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            c.execute('''INSERT INTO users (user_id, balance, ref_code, tasks_done, ref_friends, ref_progress, username, last_daily)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                      (user_id, 0, str(user_id), '', '', '', username or '', ''))
            conn.commit()
            c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
            row = c.fetchone()
        user = {
            'user_id': row[0],
            'full_name': row[1] or '',
            'age': row[2] or '',
            'city': row[3] or '',
            'balance': row[4],
            'ref_code': row[5],
            'invited_by': row[6],
            'ref_friends': set(map(int, row[7].split(','))) if row[7] else set(),
            'ref_progress': eval(row[8]) if row[8] else {},
            'username': row[9] if len(row) > 9 else '',
            'last_daily': row[10] if len(row) > 10 else '',
            'tasks_done': set(map(int, row[11].split(','))) if row[11] and row[11] != '{}' else set(),
        }
    return user

def save_user(user):
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('''UPDATE users SET full_name=?, age=?, city=?, balance=?, ref_code=?, invited_by=?,
                     ref_friends=?, ref_progress=?, username=?, last_daily=?, tasks_done=? WHERE user_id=?''',
                  (user['full_name'], user['age'], user['city'], user['balance'], user['ref_code'], user['invited_by'],
                   ','.join(map(str, user['ref_friends'])), str(user['ref_progress']), user.get('username',''), user.get('last_daily',''), ','.join(map(str, user['tasks_done'])), user['user_id']))
        conn.commit()

def get_user_by_ref_code(ref_code):
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE ref_code=?', (ref_code,))
        row = c.fetchone()
    if not row:
        return None
    return {
        'user_id': row[0],
        'full_name': row[1] or '',
        'age': row[2] or '',
        'city': row[3] or '',
        'balance': row[4],
        'ref_code': row[5],
        'invited_by': row[6],
        'ref_friends': set(map(int, row[7].split(','))) if row[7] else set(),
        'ref_progress': eval(row[8]) if row[8] else {},
    }

def send_temp_message(chat_id, text, delay=5, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    threading.Timer(delay, lambda: safe_delete_message(chat_id, msg.message_id)).start()
    return msg

def safe_delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

# --- –ú–µ–Ω—é –∏ —Ä–∞–∑–¥–µ–ª—ã ---
def show_section(call, text, markup):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=markup,
            parse_mode='HTML'
        )
        logging.info(f"edit_message_text: {text[:30]}...")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ edit_message_text: {e}")
        msg = bot.send_message(call.from_user.id, text, reply_markup=markup, parse_mode='HTML')
        logging.info(f"send_message: {text[:30]}...")
        try:
            bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        except:
            pass

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_reply_markup(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    if user_id == admin_id:
        markup.add(
            KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"),
            KeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã"),
            KeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π"),
            KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
            KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É"),
            KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞"),
            KeyboardButton("üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
            KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        )
    else:
        markup.add(
            KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"),
            KeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã"),
            KeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π"),
            KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
            KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É"),
            KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞"),
            KeyboardButton("üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        )
    return markup

def return_to_main_menu(call=None, user_id=None):
    text = "\u2B50 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    if call is not None:
        user_id = call.from_user.id
        markup = main_menu_reply_markup(user_id)
        bot.send_message(user_id, text, reply_markup=markup)
        bot.answer_callback_query(call.id)
    elif user_id is not None:
        markup = main_menu_reply_markup(user_id)
        bot.send_message(user_id, text, reply_markup=markup)
        logging.info(f"send_message –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: user_id={user_id}")
    else:
        logging.error('return_to_main_menu: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω call –∏ user_id!')

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    # --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ---
    now = datetime.now()
    today = now.strftime('%Y-%m-%d')
    hour = now.hour
    if hour < 5:
        part_of_day = '–¥–æ–±—Ä–æ–π –Ω–æ—á–∏'
    elif hour < 12:
        part_of_day = '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ'
    elif hour < 18:
        part_of_day = '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å'
    else:
        part_of_day = '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
    if user.get('last_daily','') != today:
        user['balance'] += 5
        user['last_daily'] = today
        save_user(user)
        bot.send_message(user_id, f'üëã {part_of_day.capitalize()}! –ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ ‚Äî —Ç–µ–±–µ +5 –¥—É–±–ª–µ–π!')
    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    ref_name = ''
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if not user['invited_by'] and ref_code != str(user_id):
            user['invited_by'] = ref_code
            save_user(user)
            inviter = get_user_by_ref_code(ref_code)
            if inviter:
                if 'ref_friends' not in inviter or not inviter['ref_friends']:
                    inviter['ref_friends'] = set()
                if 'ref_progress' not in inviter or not inviter['ref_progress']:
                    inviter['ref_progress'] = {}
                inviter['ref_friends'].add(user_id)
                inviter['ref_progress'][user_id] = 0
                save_user(inviter)
                username = user.get('username')
                username_str = f" (@{username})" if username else ""
                bot.send_message(inviter['user_id'], f"–ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {user['full_name']}{username_str}. –ï–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å: 0/3")
        inviter = get_user_by_ref_code(user['invited_by']) if user['invited_by'] else None
        if inviter:
            ref_name = f"\n\n<b>–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {inviter['full_name']}"
    if user['full_name']:
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        task_list(message)
        return
    text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢—Ä–µ–Ω–µ—Ä, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –∏–≥—Ä–µ!</b>\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á, –Ω–æ –≤—Å–µ –∑–æ–≤—É—Ç –ø—Ä–æ—Å—Ç–æ –¢—Ä–µ–Ω–µ—Ä.\n\n"
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å <u>–î—É–±–ª–∏</u>, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!</b>\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        f"{ref_name}"
    )
    markup = main_menu_reply_markup(user_id)
    inline = InlineKeyboardMarkup()
    inline.add(InlineKeyboardButton("üöÄ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å", callback_data="start_game"))
    bot.send_message(user_id, text, reply_markup=inline, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'start_game')
def start_game_callback(call):
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    if user['full_name']:
        return_to_main_menu(call, user_id)
        return
    user['balance'] += 10
    save_user(user)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>+10 –¥—É–±–ª–µ–π!</b>\n\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∏–∑—ã!\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò)",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(call.message, reg_full_name)

def reg_full_name(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    name = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if len(name.split()) < 2 or not re.match(r'^[–ê-–Ø–∞-—èA-Za-z–Å—ë\- ]+$', name):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_full_name)
        return
    name = ' '.join([part.capitalize() for part in name.split()])
    user['full_name'] = name
    save_user(user)
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, reg_age)

def reg_age(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    if not message.text.isdigit():
        send_temp_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, reg_age)
        return
    age = int(message.text)
    if age < 10 or age > 100:
        bot.send_message(user_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_age)
        return
    user['age'] = age
    save_user(user)
    bot.send_message(user_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ –ø—Ä–æ–ø–∏—Å–∫–µ?")
    bot.register_next_step_handler(message, reg_city)

def reg_city(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    city = message.text.strip().lower().replace('—ë', '–µ')
    # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã
    if not re.match(r'^[–∞-—èa-z\- ]{2,}$', city, re.IGNORECASE):
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_city)
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É
    rostov_variants = [
        '—Ä–æ—Å—Ç–æ–≤', '—Ä–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ–Ω—É', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É',
        '—Ä–æ—Å—Ç–æ–≤ –Ω –¥', '—Ä–æ—Å—Ç–æ–≤ –Ω/–¥', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '–≥ —Ä–æ—Å—Ç–æ–≤', '–≥. —Ä–æ—Å—Ç–æ–≤', '–≥. —Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '–≥ —Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É'
    ]
    if any(city.replace('-', ' ').replace('‚Äî', ' ').replace('.', '').replace('–≥ ', '').replace('–≥.', '').strip() == v for v in rostov_variants):
        city = '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
    else:
        city = ' '.join([part.capitalize() for part in city.split()])
    user['city'] = city
    user['balance'] += 25
    save_user(user)
    bot.send_message(
        user_id,
        "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n+25 –¥—É–±–ª–µ–π –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ü–æ–µ—Ö–∞–ª–∏!",
        parse_mode='HTML'
    )
    return_to_main_menu(None, user_id)

# --- –ú–µ–Ω—é ---
@bot.message_handler(func=lambda m: m.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π")
def show_balance(message, back_btn=False):
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.message.chat.id
    user = get_user(user_id, message.from_user.username)
    text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0"
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(user_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É")
def about_game(message, back_btn=False):
    text = (
        "<b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π <b>–¥—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        "<b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n\n"
        "<b>–ó–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥—É–±–ª–∏:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É\n\n"
        "<i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
    )
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(message.from_user.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
def rules(message, back_btn=False):
    text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã</b>\n\n"
        "1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ!</b>\n"
        "2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1</b>\n\n"
        "<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, –ø–æ—à–ª–æ—Å—Ç—å (–≤ —Ç.—á. –≤–∏–∑—É–∞–ª—å–Ω–∞—è).\n\n"
        "<b>–û–±–º–µ–Ω –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã</b>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–û–∑–æ–Ω/–í–ë), –µ—Å–ª–∏ –¥—É–±–ª–µ–π –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
    )
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(message.from_user.id, text, parse_mode='HTML')

# --- –ó–∞–¥–∞–Ω–∏—è ---
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
def task_list(message, back_btn=False):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    markup = telebot.types.InlineKeyboardMarkup()
    for task in tasks:
        done = task['id'] in user['tasks_done']
        btn_text = f"{'‚úÖ' if done else 'üî≤'} {task['name']} (+{task['reward']} –¥—É–±–ª–µ–π)"
        markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
    if back_btn:
        markup.add(telebot.types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    bot.send_message(user_id, "<b>–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>", reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('do_task_'))
def do_task(call):
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    task_id = int(call.data.split('_')[-1])
    # –ü—Ä–æ—Å–∏–º –ø—Ä—É—Ñ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    bot.answer_callback_query(call.id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_proof"))
    bot.edit_message_text(f"<b>–ü—Ä–∏—à–ª–∏ –ø—Ä—É—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:</b>\n{next((t['name'] for t in tasks if t['id']==task_id),'')}\n\n–ú–æ–∂–Ω–æ —Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç.",
                         call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ user_data –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    bot.user_data[user_id] = {'task_id': task_id, 'msg_id': call.message.message_id}
    bot.register_next_step_handler(call.message, handle_proof, task_id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_proof')
def cancel_proof(call):
    user_id = call.from_user.id
    # –û—á–∏—â–∞–µ–º user_data
    if hasattr(bot, 'user_data') and user_id in bot.user_data:
        del bot.user_data[user_id]
    bot.clear_step_handler_by_chat_id(user_id)
    bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", call.message.chat.id, call.message.message_id)
    return_to_main_menu(call, user_id)

def handle_proof(message, task_id):
    user_id = message.from_user.id
    proof_type = None
    proof_data = None
    if message.content_type == 'photo':
        proof_type = 'photo'
        proof_data = message.photo[-1].file_id
    elif message.content_type == 'text':
        proof_type = 'text'
        proof_data = message.text
    elif message.content_type == 'document':
        proof_type = 'document'
        proof_data = message.document.file_id
    else:
        send_temp_message(user_id, "‚ùå –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç!")
        bot.register_next_step_handler(message, handle_proof, task_id)
        return
    add_pending_task(user_id, task_id, proof_type, proof_data)
    send_temp_message(user_id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –ü–æ–∫–∞ –æ–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è.", delay=10)
    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ
    task_name = next((t['name'] for t in tasks if t['id']==task_id),'')
    user = get_user(user_id, message.from_user.username)
    username = user.get('username')
    if username:
        username_str = f" (@{username})"
    else:
        username_str = ""
    text = f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è:</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
               InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}"))
    if proof_type == 'photo':
        bot.send_photo(GROUP_ID, proof_data, caption=text, parse_mode='HTML', reply_markup=markup, message_thread_id=TOPIC_ID)
    elif proof_type == 'document':
        bot.send_document(GROUP_ID, proof_data, caption=text, parse_mode='HTML', reply_markup=markup, message_thread_id=TOPIC_ID)
    else:
        bot.send_message(GROUP_ID, text + f"\n\n–ü—Ä—É—Ñ: {proof_data}", parse_mode='HTML', reply_markup=markup, message_thread_id=TOPIC_ID)

# --- –†–µ—Ñ–µ—Ä–∞–ª—ã ---
@bot.message_handler(func=lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def referral(message, back_btn=False):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    ref_link = f"https://t.me/{BOT_USERNAME}?start={user['ref_code']}"
    text = (
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ <b>100 –¥—É–±–ª–µ–π</b>!\n"
        "<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞:</b>\n"
        f"<code>{ref_link}</code>\n"
        "<i>–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É ‚Äî –ø—É—Å—Ç—å –∑–∞—Ö–æ–¥–∏—Ç!</i>\n\n"
        "<b>–í–ê–ñ–ù–û!</b> –î—É–±–ª–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç 3 –∑–∞–¥–∞–Ω–∏—è.\n"
    )
    # –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    markup = InlineKeyboardMarkup()
    if user['ref_friends']:
        text += "\n<b>–¢–≤–æ–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>\n"
        for fid in user['ref_friends']:
            fuser = get_user(fid, message.from_user.username)
            done = user['ref_progress'].get(fid, 0)
            username = fuser.get('username')
            if username:
                link = f'<a href="https://t.me/{username}">{fuser["full_name"]}</a>'
            else:
                link = fuser["full_name"]
            text += f"‚Ä¢ {link} ‚Äî <b>{done}/3 –∑–∞–¥–∞–Ω–∏–π</b>\n"
    else:
        text += "\n–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π."
    if back_btn:
        markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=markup)
        bot.send_message(user_id, ref_link)
    else:
        markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)
        bot.send_message(user_id, ref_link)

# --- –û–±–º–µ–Ω –ø—Ä–∏–∑–æ–≤ ---
@bot.message_handler(func=lambda m: m.text == "üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã")
def exchange_prizes(message, back_btn=False):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n"
    for prize in prizes:
        if prize['cost'] > 0:
            text += f"‚Ä¢ {prize['name']} ‚Äî <b>{prize['cost']} –¥—É–±–ª–µ–π</b>\n"
        else:
            text += f"‚Ä¢ {prize['name']}\n"
    text += "\n–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑, –Ω–∞–ø–∏—à–∏: <code>–ü–†–ò–ó &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code>\n"
    text += "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –Ω–∞–ø–∏—à–∏: <code>–ú–ê–†–ö–ï–¢ &lt;—Å—Å—ã–ª–∫–∞&gt; &lt;—Å—Ç–æ–∏–º–æ—Å—Ç—å&gt;</code>"
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(user_id, text, parse_mode='HTML')

@bot.message_handler(regexp=r'^–ü–†–ò–ó (.+)')
def buy_prize(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    prize_name = message.text[5:].strip()
    prize = next((p for p in prizes if prize_name.lower() in p['name'].lower()), None)
    if not prize:
        send_temp_message(user_id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ—Ç.")
        return
    if user['balance'] < prize['cost']:
        send_temp_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= prize['cost']
    bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª <b>{prize['cost']}</b> –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑: <b>{prize['name']}</b>", parse_mode='HTML')

@bot.message_handler(regexp=r'^–ú–ê–†–ö–ï–¢ (.+) (\d+)')
def buy_market(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    parts = message.text.split()
    link = parts[1]
    try:
        cost = int(parts[2])
    except Exception:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
        return
    if user['balance'] < cost:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= cost
    bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª <b>{cost}</b> –¥—É–±–ª–µ–π –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {link}", parse_mode='HTML')

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
def support(message, back_btn=False):
    bot.send_message(message.from_user.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    bot.register_next_step_handler(message, save_support)

def save_support(message):
    user_id = message.from_user.id
    support_messages.append({'user_id': user_id, 'text': message.text})
    if admin_id:
        bot.send_message(admin_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    send_temp_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", delay=10)

@bot.message_handler(commands=['export_users'])
def export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM users')
        rows = c.fetchall()
    filename = 'users_export.csv'
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['user_id', 'full_name', 'age', 'city', 'balance', 'ref_code', 'invited_by', 'ref_friends', 'ref_progress', 'tasks_done'])
        for row in rows:
            writer.writerow(row)
    with open(filename, 'rb') as f:
        bot.send_document(admin_id, f, caption='–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda m: m.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞")
def admin_export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    export_users(message)

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_stats(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT COUNT(*) FROM users')
        total = c.fetchone()[0]
        c.execute('SELECT COUNT(*) FROM users WHERE balance >= 400')
        rich = c.fetchone()[0]
    bot.send_message(admin_id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–° –±–∞–ª–∞–Ω—Å–æ–º 400+ –¥—É–±–ª–µ–π: <b>{rich}</b>", parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def admin_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT user_id, full_name, balance FROM users LIMIT 20')
        rows = c.fetchall()
    text = '<b>–ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
    for row in rows:
        text += f"ID: <code>{row[0]}</code> | {row[1]} | üí∞ {row[2]} –¥—É–±–ª–µ–π\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è")
def admin_support(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not support_messages:
        bot.send_message(admin_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return
    text = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n'
    for msg in support_messages[-10:]:
        text += f"ID: <code>{msg['user_id']}</code> ‚Äî {msg['text']}\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(func=lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def to_admin_panel(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = True
    show_admin_panel(message)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞")
def to_user_menu(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = False
    return_to_main_menu(None, message.from_user.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_') or call.data == 'back_to_menu')
def handle_main_menu(call):
    user_id = call.from_user.id
    data = call.data
    logging.info(f"Callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if data == "menu_tasks":
        text = "<b>–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>"
        markup = InlineKeyboardMarkup()
        for task in tasks:
            done = task['id'] in get_user(user_id)['tasks_done']
            btn_text = f"{'‚úÖ' if done else 'üî≤'} {task['name']} (+{task['reward']} –¥—É–±–ª–µ–π)"
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
        markup.add(telebot.types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        show_section(call, text, markup)
    elif data == "menu_prizes":
        user = get_user(user_id, call.from_user.username)
        text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n"
        for prize in prizes:
            if prize['cost'] > 0:
                text += f"‚Ä¢ {prize['name']} ‚Äî <b>{prize['cost']} –¥—É–±–ª–µ–π</b>\n"
            else:
                text += f"‚Ä¢ {prize['name']}\n"
        text += "\n–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑, –Ω–∞–ø–∏—à–∏: <code>–ü–†–ò–ó &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code>\n"
        text += "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –Ω–∞–ø–∏—à–∏: <code>–ú–ê–†–ö–ï–¢ &lt;—Å—Å—ã–ª–∫–∞&gt; &lt;—Å—Ç–æ–∏–º–æ—Å—Ç—å&gt;</code>"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_balance":
        user = get_user(user_id, call.from_user.username)
        text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_ref":
        # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π message-–æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ referral
        class FakeMessage:
            def __init__(self, from_user, message):
                self.from_user = from_user
                self.message = message
        fake_message = FakeMessage(call.from_user, call.message)
        referral(fake_message, back_btn=True)
    elif data == "menu_about":
        text = "<b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        text += "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π <b>–¥—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        text += "<b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n\n"
        text += "<b>–ó–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥—É–±–ª–∏:</b>\n"
        text += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        text += "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É\n\n"
        text += "<i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_rules":
        text = "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã</b>\n\n"
        text += "1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ!</b>\n"
        text += "2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1</b>\n\n"
        text += "<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, –ø–æ—à–ª–æ—Å—Ç—å (–≤ —Ç.—á. –≤–∏–∑—É–∞–ª—å–Ω–∞—è).\n\n"
        text += "<b>–û–±–º–µ–Ω –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n"
        text += "‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π\n"
        text += "‚Ä¢ –ü—Ä–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã</b>\n"
        text += "‚Ä¢ –ú–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–û–∑–æ–Ω/–í–ë), –µ—Å–ª–∏ –¥—É–±–ª–µ–π –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_support":
        text = "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_admin" and user_id == admin_id:
        admin_states[admin_id] = True
        show_admin_panel(call)
        bot.answer_callback_query(call.id)
        return
    elif data == "back_to_menu":
        return_to_main_menu(call, user_id)
        return
    bot.answer_callback_query(call.id)

def show_admin_panel(call):
    text = "<b>üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∫–∞", callback_data="admin_export"),
        InlineKeyboardButton("üì® –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_support"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏", callback_data="admin_add_balance"),
        InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏", callback_data="admin_sub_balance"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞", callback_data="back_to_menu")
    )
    show_section(call, text, markup)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
admin_action_state = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_') or call.data == 'back_to_menu')
def handle_admin_panel(call):
    user_id = call.from_user.id
    data = call.data
    if user_id != admin_id:
        bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if data == "admin_add_balance":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–µ–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        admin_action_state['action'] = 'add_balance'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    elif data == "admin_sub_balance":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ —É–±—Ä–∞—Ç—å –¥—É–±–ª–µ–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        admin_action_state['action'] = 'sub_balance'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    elif data == "admin_delete_user":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        admin_action_state['action'] = 'delete_user'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)
        return
    elif data == "admin_broadcast":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        admin_action_state['action'] = 'broadcast_text'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_broadcast_step)
        return
    elif data == "admin_stats":
        with sqlite3.connect('users.db') as conn:
            c = conn.cursor()
            c.execute('SELECT COUNT(*) FROM users')
            total = c.fetchone()[0]
            c.execute('SELECT COUNT(*) FROM users WHERE balance >= 400')
            rich = c.fetchone()[0]
        text = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–° –±–∞–ª–∞–Ω—Å–æ–º 400+ –¥—É–±–ª–µ–π: <b>{rich}</b>"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_users":
        with sqlite3.connect('users.db') as conn:
            c = conn.cursor()
            c.execute('SELECT user_id, full_name, balance FROM users LIMIT 20')
            rows = c.fetchall()
        text = '<b>–ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
        for row in rows:
            text += f"ID: <code>{row[0]}</code> | {row[1]} | üí∞ {row[2]} –¥—É–±–ª–µ–π\n"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_export":
        with sqlite3.connect('users.db') as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM users')
            rows = c.fetchall()
        filename = 'users_export.csv'
        import csv
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'full_name', 'age', 'city', 'balance', 'ref_code', 'invited_by', 'ref_friends', 'ref_progress', 'tasks_done'])
            for row in rows:
                writer.writerow(row)
        with open(filename, 'rb') as f:
            bot.send_document(admin_id, f, caption='–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        bot.answer_callback_query(call.id, "–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    elif data == "admin_support":
        if not support_messages:
            text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π."
        else:
            text = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n'
            for msg in support_messages[-10:]:
                text += f"ID: <code>{msg['user_id']}</code> ‚Äî {msg['text']}\n"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_panel":
        show_admin_panel(call)
    elif data == "back_to_menu":
        return_to_main_menu(call)
    else:
        show_admin_panel(call)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–±–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π ---
def admin_balance_step(message):
    if message.from_user.id != admin_id:
        return
    try:
        parts = message.text.strip().split()
        uid = int(parts[0])
        amount = int(parts[1])
    except Exception:
        bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    user = get_user(uid)
    if not user:
        bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if admin_action_state.get('action') == 'add_balance':
        user['balance'] += amount
        save_user(user)
        bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—É–±–ª–µ–π. –ë–∞–ª–∞–Ω—Å: {user['balance']}")
    elif admin_action_state.get('action') == 'sub_balance':
        user['balance'] = max(0, user['balance'] - amount)
        save_user(user)
        bot.send_message(admin_id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–±—Ä–∞–Ω–æ {amount} –¥—É–±–ª–µ–π. –ë–∞–ª–∞–Ω—Å: {user['balance']}")
    show_admin_panel(message)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def admin_delete_user_step(message):
    if message.from_user.id != admin_id:
        return
    try:
        uid = int(message.text.strip())
    except Exception:
        bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)
        return
    user = get_user(uid)
    if not user:
        bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_confirm_delete_{uid}"),
               InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    bot.send_message(admin_id, f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} ({user['full_name']})?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_confirm_delete_'))
def admin_confirm_delete(call):
    if call.from_user.id != admin_id:
        return
    uid = int(call.data.split('_')[-1])
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('DELETE FROM pending_tasks WHERE user_id=?', (uid,))
        c.execute('DELETE FROM users WHERE user_id=?', (uid,))
        conn.commit()
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
    show_admin_panel(call)

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
def admin_broadcast_step(message):
    if message.from_user.id != admin_id:
        return
    text = message.text.strip()
    admin_action_state['broadcast_text'] = text
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="admin_broadcast_send"),
               InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    bot.send_message(admin_id, f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_broadcast_send')
def admin_broadcast_send(call):
    if call.from_user.id != admin_id:
        return
    text = admin_action_state.get('broadcast_text')
    if not text:
        bot.send_message(admin_id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT user_id FROM users')
        user_ids = [row[0] for row in c.fetchall()]
    count = 0
    for uid in user_ids:
        try:
            bot.send_message(uid, text)
            count += 1
        except Exception:
            pass
    bot.send_message(admin_id, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    show_admin_panel(call)

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª ---
@bot.message_handler(commands=['ref_stats'])
def ref_stats(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT user_id, full_name, invited_by FROM users')
        rows = c.fetchall()
    text = '<b>–ö—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</b>\n'
    for row in rows:
        if row[2]:
            inviter = get_user_by_ref_code(row[2])
            inviter_name = inviter['full_name'] if inviter else row[2]
            text += f"{row[1]} (ID {row[0]}) ‚Üê {inviter_name}\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

def back_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    return markup

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å pending_tasks ---
def add_pending_task(user_id, task_id, proof_type, proof_data):
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('INSERT INTO pending_tasks (user_id, task_id, proof_type, proof_data, status) VALUES (?, ?, ?, ?, ?)',
                  (user_id, task_id, proof_type, proof_data, 'pending'))
        conn.commit()

def get_pending_tasks():
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT id, user_id, task_id, proof_type, proof_data FROM pending_tasks WHERE status="pending"')
        rows = c.fetchall()
    return rows

def set_pending_task_status(task_id, status):
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('UPDATE pending_tasks SET status=? WHERE id=?', (status, task_id))
        conn.commit()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_') or call.data.startswith('reject_'))
def handle_task_moderation(call):
    data = call.data
    action, user_id, task_id = data.split('_')
    user_id = int(user_id)
    task_id = int(task_id)
    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT id FROM pending_tasks WHERE user_id=? AND task_id=? AND status="pending"', (user_id, task_id))
        row = c.fetchone()
    if not row:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return
    pending_id = row[0]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data="menu_tasks"))
    if action == 'approve':
        set_pending_task_status(pending_id, 'approved')
        user = get_user(user_id)
        reward = next((t['reward'] for t in tasks if t['id'] == task_id), 0)
        user['balance'] += reward
        save_user(user)
        user['tasks_done'].add(task_id)
        save_user(user)
        bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ <b>{next((t['name'] for t in tasks if t['id']==task_id),'')} </b> –ø—Ä–∏–Ω—è—Ç–æ! +{reward} –¥—É–±–ª–µ–π\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.", parse_mode='HTML', reply_markup=markup)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    else:
        set_pending_task_status(pending_id, 'rejected')
        bot.send_message(user_id, f"‚ùå –ó–∞–¥–∞–Ω–∏–µ <b>{next((t['name'] for t in tasks if t['id']==task_id),'')}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ.", parse_mode='HTML', reply_markup=markup)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# --- –ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π ---
@bot.message_handler(func=lambda m: m.text == "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
def admin_pending_tasks(message):
    if message.from_user.id != admin_id:
        return
    tasks = get_pending_tasks()
    if not tasks:
        bot.send_message(admin_id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return
    for row in tasks:
        pid, user_id, task_id, proof_type, proof_data = row
        user = get_user(user_id)
        task_name = next((t['name'] for t in tasks if t['id']==task_id),'')
        username = user.get('username')
        if username:
            username_str = f" (@{username})"
        else:
            username_str = ""
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
                   InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}"))
        if proof_type == 'photo':
            bot.send_photo(admin_id, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
        elif proof_type == 'document':
            bot.send_document(admin_id, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(admin_id, text + f"\n\n–ü—Ä—É—Ñ: {proof_data}", parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'done')
def already_done_callback(call):
    bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")

if __name__ == "__main__":
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}') 