import telebot
import os
import random
import logging
import sqlite3
import csv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv('TELEGRAM_TOKEN') or '7601370339:AAH_tTzX6GUwkExnxIAUJ5144DZCzUCAGQE'
bot = telebot.TeleBot(API_TOKEN)

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[logging.FileHandler('bot.log', encoding='utf-8'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

users = {}
tasks = [
    {'id': 1, 'name': '–ü–æ–¥–ø–∏—à–∏—Å—å (–ê–ß –∏ –ù–æ–≤—ã–µ –ª—é–¥–∏)', 'reward': 10},
    {'id': 2, 'name': '–õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç/–≤–∏–¥–µ–æ', 'reward': 5},
    {'id': 3, 'name': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É/–≤–∏–¥–µ–æ', 'reward': 7},
    {'id': 4, 'name': '–í—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç', 'reward': 15},
    {'id': 5, 'name': '–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏', 'reward': 20},
    {'id': 6, 'name': '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞', 'reward': 100},
    {'id': 7, 'name': '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', 'reward': 8},
    {'id': 8, 'name': '–ù–∞–π–¥–∏ –∞–≥–∏—Ç–º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å—Ñ–æ—Ç–∫–∞–π—Å—è', 'reward': 12},
    {'id': 9, 'name': '–¶–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ñ–æ—Ç–∫–∞—Ç—å—Å—è —Å —Ü–≤–µ—Ç–æ–º)', 'reward': 10},
    {'id': 10, 'name': '–ü–æ–≤–µ—Å–∏—Ç—å –Ω–∞–±–æ–ª–∫–æ–Ω–Ω–∏–∫ –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'reward': 30},
    {'id': 11, 'name': '–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å', 'reward': 10},
    {'id': 12, 'name': '–ü—Ä–∏–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ¬´–ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ¬ª', 'reward': 20},
    {'id': 13, 'name': '–°–Ω—è—Ç—å —Ä–∏–ª—Å –ø—Ä–æ 100 —Ä–µ—à–µ–Ω–∏–π –æ—Ç –ù–õ', 'reward': 25},
]
prizes = [
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'cost': 1290},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', 'cost': 1790},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', 'cost': 2990},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 1300},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 1300},
    {'name': '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞)', 'cost': 0},
]
admin_id = 790005263 # —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–π user_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_messages = []

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ (in-memory, –Ω–∞ —Å–µ—Å—Å–∏—é) ---
admin_states = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        age INTEGER,
        city TEXT,
        balance INTEGER DEFAULT 0,
        ref_code TEXT,
        invited_by TEXT,
        tasks_done TEXT,
        ref_friends TEXT,
        ref_progress TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_user(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    row = c.fetchone()
    if not row:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute('''INSERT INTO users (user_id, balance, ref_code, tasks_done, ref_friends, ref_progress)
                     VALUES (?, ?, ?, ?, ?, ?)''',
                  (user_id, 0, str(user_id), '', '', ''))
        conn.commit()
        c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
        row = c.fetchone()
    user = {
        'user_id': row[0],
        'full_name': row[1] or '',
        'age': row[2] or '',
        'city': row[3] or '',
        'balance': row[4],
        'ref_code': row[5],
        'invited_by': row[6],
        'tasks_done': set(map(int, row[7].split(','))) if row[7] else set(),
        'ref_friends': set(map(int, row[8].split(','))) if row[8] else set(),
        'ref_progress': eval(row[9]) if row[9] else {},
    }
    conn.close()
    return user

def save_user(user):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''UPDATE users SET full_name=?, age=?, city=?, balance=?, ref_code=?, invited_by=?,
                 tasks_done=?, ref_friends=?, ref_progress=? WHERE user_id=?''',
              (user['full_name'], user['age'], user['city'], user['balance'], user['ref_code'], user['invited_by'],
               ','.join(map(str, user['tasks_done'])), ','.join(map(str, user['ref_friends'])), str(user['ref_progress']), user['user_id']))
    conn.commit()
    conn.close()

def show_menu(user_id):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
    if user_id == admin_id and not admin_states.get(user_id, False):
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="menu_tasks"),
            InlineKeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", callback_data="menu_prizes"),
            InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π", callback_data="menu_balance"),
            InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="menu_ref"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É", callback_data="menu_about"),
            InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="menu_rules"),
            InlineKeyboardButton("üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="menu_support"),
            InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")
        )
        bot.send_message(user_id, "\u2B50 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        return
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∏ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_id == admin_id and admin_states.get(user_id, False):
        show_admin_menu(user_id)
        return
    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="menu_tasks"),
        InlineKeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", callback_data="menu_prizes"),
        InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π", callback_data="menu_balance"),
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="menu_ref"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É", callback_data="menu_about"),
        InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="menu_rules"),
        InlineKeyboardButton("üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="menu_support")
    )
    bot.send_message(user_id, "\u2B50 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

def show_admin_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "üì• –í—ã–≥—Ä—É–∑–∫–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏—è",
        "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞"
    )
    bot.send_message(user_id, "<b>üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", reply_markup=markup, parse_mode='HTML')

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if user['full_name']:
        bot.send_message(user_id, "\u2705 –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode='HTML')
        show_menu(user_id)
        return
    user['balance'] += 10
    save_user(user)
    bot.send_message(
        user_id,
        "<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢—Ä–µ–Ω–µ—Ä, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –∏–≥—Ä–µ!</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–¥–µ, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å <b>–î—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        "<b>+10 –¥—É–±–ª–µ–π</b> –∑–∞ —Å—Ç–∞—Ä—Ç!\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò)",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(message, reg_full_name)

def reg_full_name(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    user['full_name'] = message.text
    save_user(user)
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, reg_age)

def reg_age(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not message.text.isdigit():
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, reg_age)
        return
    user['age'] = int(message.text)
    save_user(user)
    bot.send_message(user_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? (–ø–æ –ø—Ä–æ–ø–∏—Å–∫–µ)")
    bot.register_next_step_handler(message, reg_city)

def reg_city(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    user['city'] = message.text
    user['balance'] += 25
    save_user(user)
    bot.send_message(
        user_id,
        "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n+25 –¥—É–±–ª–µ–π –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ü–æ–µ—Ö–∞–ª–∏!",
        parse_mode='HTML'
    )
    show_menu(user_id)

# --- –ú–µ–Ω—é ---
@bot.message_handler(func=lambda m: m.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π")
def show_balance(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    bot.send_message(
        user_id,
        f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É")
def about_game(message):
    text = (
        "<b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π <b>–¥—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        "<b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n\n"
        "<b>–ó–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥—É–±–ª–∏:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É\n\n"
        "<i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
    )
    bot.send_message(message.from_user.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
def rules(message):
    text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã</b>\n\n"
        "1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ!</b>\n"
        "2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1</b>\n\n"
        "<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, –ø–æ—à–ª–æ—Å—Ç—å (–≤ —Ç.—á. –≤–∏–∑—É–∞–ª—å–Ω–∞—è).\n\n"
        "<b>–û–±–º–µ–Ω –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã</b>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–û–∑–æ–Ω/–í–ë), –µ—Å–ª–∏ –¥—É–±–ª–µ–π –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
    )
    bot.send_message(message.from_user.id, text, parse_mode='HTML')

# --- –ó–∞–¥–∞–Ω–∏—è ---
@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
def task_list(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    markup = telebot.types.InlineKeyboardMarkup()
    for task in tasks:
        done = task['id'] in user['tasks_done']
        btn_text = f"{'‚úÖ' if done else 'üî≤'} {task['name']} (+{task['reward']} –¥—É–±–ª–µ–π)"
        if not done:
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
        else:
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data="done"))
    bot.send_message(user_id, "<b>–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>", reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('do_task_'))
def do_task(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    task_id = int(call.data.split('_')[-1])
    if task_id in user['tasks_done']:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        return
    user['tasks_done'].add(task_id)
    reward = next((t['reward'] for t in tasks if t['id'] == task_id), 0)
    user['balance'] += reward
    bot.answer_callback_query(call.id, f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{reward} –¥—É–±–ª–µ–π")
    bot.edit_message_text(f"<b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b> +{reward} –¥—É–±–ª–µ–π", user_id, call.message.message_id, parse_mode='HTML')
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if user['invited_by']:
        inviter = get_user(int(user['invited_by']))
        inviter['ref_progress'][user_id] = inviter['ref_progress'].get(user_id, 0) + 1
        # –ï—Å–ª–∏ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å 100 –¥—É–±–ª–µ–π
        if inviter['ref_progress'][user_id] == 3:
            inviter['balance'] += 100
            inviter['ref_friends'].add(user_id)
            bot.send_message(inviter['ref_code'], f"üéâ –¢–≤–æ–π –¥—Ä—É–≥ <b>{user['full_name']}</b> –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>100 –¥—É–±–ª–µ–π</b>.", parse_mode='HTML')

# --- –†–µ—Ñ–µ—Ä–∞–ª—ã ---
@bot.message_handler(func=lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def referral(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    ref_link = f"/start {user['ref_code']}"
    text = (
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ <b>100 –¥—É–±–ª–µ–π</b>!\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞:</b> <code>{ref_link}</code>\n\n"
        "<b>–í–ê–ñ–ù–û!</b> –î—É–±–ª–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç 3 –∑–∞–¥–∞–Ω–∏—è."
    )
    bot.send_message(user_id, text, parse_mode='HTML')

@bot.message_handler(commands=['start'])
def start_with_ref(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        user_id = message.from_user.id
        user = get_user(user_id)
        if not user['invited_by'] and ref_code != str(user_id):
            user['invited_by'] = ref_code
    send_welcome(message)

# --- –û–±–º–µ–Ω –ø—Ä–∏–∑–æ–≤ ---
@bot.message_handler(func=lambda m: m.text == "üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã")
def exchange_prizes(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0\n\n"
    text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n"
    for prize in prizes:
        if prize['cost'] > 0:
            text += f"‚Ä¢ {prize['name']} ‚Äî <b>{prize['cost']} –¥—É–±–ª–µ–π</b>\n"
        else:
            text += f"‚Ä¢ {prize['name']}\n"
    text += "\n–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑, –Ω–∞–ø–∏—à–∏: <code>–ü–†–ò–ó &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code>\n"
    text += "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –Ω–∞–ø–∏—à–∏: <code>–ú–ê–†–ö–ï–¢ &lt;—Å—Å—ã–ª–∫–∞&gt; &lt;—Å—Ç–æ–∏–º–æ—Å—Ç—å&gt;</code>"
    bot.send_message(user_id, text, parse_mode='HTML')

@bot.message_handler(regexp=r'^–ü–†–ò–ó (.+)')
def buy_prize(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    prize_name = message.text[5:].strip()
    prize = next((p for p in prizes if prize_name.lower() in p['name'].lower()), None)
    if not prize:
        bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ—Ç.")
        return
    if user['balance'] < prize['cost']:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= prize['cost']
    bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª <b>{prize['cost']}</b> –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑: <b>{prize['name']}</b>", parse_mode='HTML')

@bot.message_handler(regexp=r'^–ú–ê–†–ö–ï–¢ (.+) (\d+)')
def buy_market(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    parts = message.text.split()
    link = parts[1]
    try:
        cost = int(parts[2])
    except Exception:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
        return
    if user['balance'] < cost:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= cost
    bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª <b>{cost}</b> –¥—É–±–ª–µ–π –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {link}", parse_mode='HTML')

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
def support(message):
    bot.send_message(message.from_user.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    bot.register_next_step_handler(message, save_support)

def save_support(message):
    user_id = message.from_user.id
    support_messages.append({'user_id': user_id, 'text': message.text})
    if admin_id:
        bot.send_message(admin_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@bot.message_handler(commands=['export_users'])
def export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users')
    rows = c.fetchall()
    conn.close()
    filename = 'users_export.csv'
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['user_id', 'full_name', 'age', 'city', 'balance', 'ref_code', 'invited_by', 'tasks_done', 'ref_friends', 'ref_progress'])
        for row in rows:
            writer.writerow(row)
    with open(filename, 'rb') as f:
        bot.send_document(admin_id, f, caption='–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda m: m.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞")
def admin_export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    export_users(message)

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_stats(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM users')
    total = c.fetchone()[0]
    c.execute('SELECT COUNT(*) FROM users WHERE balance >= 400')
    rich = c.fetchone()[0]
    conn.close()
    bot.send_message(admin_id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–° –±–∞–ª–∞–Ω—Å–æ–º 400+ –¥—É–±–ª–µ–π: <b>{rich}</b>", parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def admin_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id, full_name, balance FROM users LIMIT 20')
    rows = c.fetchall()
    conn.close()
    text = '<b>–ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
    for row in rows:
        text += f"ID: <code>{row[0]}</code> | {row[1]} | üí∞ {row[2]} –¥—É–±–ª–µ–π\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è")
def admin_support(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not support_messages:
        bot.send_message(admin_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return
    text = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n'
    for msg in support_messages[-10:]:
        text += f"ID: <code>{msg['user_id']}</code> ‚Äî {msg['text']}\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(func=lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def to_admin_panel(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = True
    show_admin_menu(admin_id)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞")
def to_user_menu(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = False
    show_menu(admin_id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
def handle_main_menu(call):
    user_id = call.from_user.id
    data = call.data
    if data == "menu_tasks":
        task_list(call)
    elif data == "menu_prizes":
        exchange_prizes(call)
    elif data == "menu_balance":
        show_balance(call)
    elif data == "menu_ref":
        referral(call)
    elif data == "menu_about":
        about_game(call)
    elif data == "menu_rules":
        rules(call)
    elif data == "menu_support":
        support(call)
    elif data == "menu_admin" and user_id == admin_id:
        admin_states[admin_id] = True
        show_admin_menu(admin_id)
    bot.answer_callback_query(call.id)

# --- –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ message, —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å message –∏–ª–∏ call ---
def get_message_user_id(message):
    return message.from_user.id if hasattr(message, 'from_user') else message.message.chat.id

if __name__ == "__main__":
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}') 