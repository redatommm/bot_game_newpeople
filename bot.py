import telebot
import os
import random

API_TOKEN = os.getenv('TELEGRAM_TOKEN') or '7601370339:AAH_tTzX6GUwkExnxIAUJ5144DZCzUCAGQE'
bot = telebot.TeleBot(API_TOKEN)

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

users = {}
tasks = [
    {'id': 1, 'name': '–ü–æ–¥–ø–∏—à–∏—Å—å (–ê–ß –∏ –ù–æ–≤—ã–µ –ª—é–¥–∏)', 'reward': 10},
    {'id': 2, 'name': '–õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç/–≤–∏–¥–µ–æ', 'reward': 5},
    {'id': 3, 'name': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É/–≤–∏–¥–µ–æ', 'reward': 7},
    {'id': 4, 'name': '–í—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç', 'reward': 15},
    {'id': 5, 'name': '–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏', 'reward': 20},
    {'id': 6, 'name': '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞', 'reward': 100},
    {'id': 7, 'name': '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', 'reward': 8},
    {'id': 8, 'name': '–ù–∞–π–¥–∏ –∞–≥–∏—Ç–º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å—Ñ–æ—Ç–∫–∞–π—Å—è', 'reward': 12},
    {'id': 9, 'name': '–¶–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ñ–æ—Ç–∫–∞—Ç—å—Å—è —Å —Ü–≤–µ—Ç–æ–º)', 'reward': 10},
    {'id': 10, 'name': '–ü–æ–≤–µ—Å–∏—Ç—å –Ω–∞–±–æ–ª–∫–æ–Ω–Ω–∏–∫ –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'reward': 30},
    {'id': 11, 'name': '–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å', 'reward': 10},
    {'id': 12, 'name': '–ü—Ä–∏–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ¬´–ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ¬ª', 'reward': 20},
    {'id': 13, 'name': '–°–Ω—è—Ç—å —Ä–∏–ª—Å –ø—Ä–æ 100 —Ä–µ—à–µ–Ω–∏–π –æ—Ç –ù–õ', 'reward': 25},
]
prizes = [
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'cost': 1290},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', 'cost': 1790},
    {'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', 'cost': 2990},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 1300},
    {'name': '–§—É—Ç–±–æ–ª–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–ö–µ–ø–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 1300},
    {'name': '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞)', 'cost': 0},
]
admin_id = None  # —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–π user_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_messages = []

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user(user_id):
    if user_id not in users:
        users[user_id] = {
            'balance': 0,
            'full_name': '',
            'age': '',
            'city': '',
            'tasks_done': set(),
            'ref_code': str(user_id),
            'invited_by': None,
            'ref_friends': set(),
            'ref_progress': {},  # user_id: tasks_done_count
        }
    return users[user_id]

def show_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏–≥—Ä—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    markup.add("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏")
    markup.add("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
    markup.add("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    markup.add("–ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π")
    markup.add("–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã")
    markup.add("–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if user['full_name']:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        show_menu(user_id)
        return
    user['balance'] += 10
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –¢—Ä–µ–Ω–µ—Ä ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –∏–≥—Ä–µ!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –î—É–±–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –¥—É–±–ª–µ–π –∑–∞ —Å—Ç–∞—Ä—Ç.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò)")
    bot.register_next_step_handler(message, reg_full_name)

def reg_full_name(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    user['full_name'] = message.text
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, reg_age)

def reg_age(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not message.text.isdigit():
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, reg_age)
        return
    user['age'] = int(message.text)
    bot.send_message(user_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? (–ø–æ –ø—Ä–æ–ø–∏—Å–∫–µ)")
    bot.register_next_step_handler(message, reg_city)

def reg_city(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    user['city'] = message.text
    user['balance'] += 25
    bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–æ–µ—Ö–∞–ª–∏.\n\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 25 –¥—É–±–ª–µ–π.")
    show_menu(user_id)

# --- –ú–µ–Ω—é ---
@bot.message_handler(func=lambda m: m.text == "–ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π")
def show_balance(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    bot.send_message(user_id, f"–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ –ª–µ–∂–∏—Ç {user['balance']} –¥—É–±–ª–µ–π")

@bot.message_handler(func=lambda m: m.text == "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏–≥—Ä—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
def about_game(message):
    text = (
        "–°—É—Ç—å –∏–≥—Ä—ã –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –º–µ—Å—è—Ü–µ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥—É–±–ª–∏. –î—É–±–ª–∏ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã.\n"
        "–ó–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å 2 —Ç–∏–ø–æ–≤:\n- –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n- –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n"
        "–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥—É–±–ª–∏. –¢–∞–∫ –∂–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥—É–±–ª–∏, –µ—Å–ª–∏ –ø—Ä–∏–≤–µ–¥–µ—à—å –≤ –∏–≥—Ä—É –¥—Ä—É–∑–µ–π.\n"
        "–¢–∞–∫ –∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥—É–±–ª–∏ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É.\n"
        "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    )
    bot.send_message(message.from_user.id, text)

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏")
def rules(message):
    text = (
        "–ü–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏–≥—Ä—ã ‚Äì —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ.\n"
        "–í—Ç–æ—Ä–æ–µ –ø—Ä–∞–≤–∏–ª–æ ‚Äì —Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ.\n"
        "–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –∫–∞–∫ —Ç–∞–∫–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç. –ù–û, –∏–≥—Ä–∞ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –º–∞—Ç–∞ –∏ –ª—é–±–æ–π –ø–æ—à–ª–æ—Å—Ç–∏, –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ç–∞–∫ –∏ —Å–ª–æ–≤–µ—Å–Ω–æ–π.\n"
        "–ü—Ä–∞–≤–∏–ª–æ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:\n"
        "- –æ–±–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞–∫–æ–ø–∏—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π (–º–∏–Ω–∏–º—É–º 400)\n"
        "- –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –º–æ–∂–Ω–æ –Ω–∞ –ø—Ä–∏–∑—ã –∏–∑ –ø–µ—Ä–µ—á–Ω—è (—Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã¬ª)\n"
        "- –¢–∞–∫ –∂–µ –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –º–æ–∂–Ω–æ –Ω–∞ –ø—Ä–∏–∑—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (–û–∑–æ–Ω –∏–ª–∏ –í–ë), –ø—Ä–∏—Å–ª–∞–≤ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π –≤ –≤–∞—à–µ–º —Ä—é–∫–∑–∞–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ."
    )
    bot.send_message(message.from_user.id, text)

# --- –ó–∞–¥–∞–Ω–∏—è ---
@bot.message_handler(func=lambda m: m.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
def task_list(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    markup = telebot.types.InlineKeyboardMarkup()
    for task in tasks:
        done = task['id'] in user['tasks_done']
        btn_text = f"{'‚úÖ' if done else 'üî≤'} {task['name']} (+{task['reward']} –¥—É–±–ª–µ–π)"
        if not done:
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
        else:
            markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data="done"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('do_task_'))
def do_task(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    task_id = int(call.data.split('_')[-1])
    if task_id in user['tasks_done']:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        return
    user['tasks_done'].add(task_id)
    reward = next((t['reward'] for t in tasks if t['id'] == task_id), 0)
    user['balance'] += reward
    bot.answer_callback_query(call.id, f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{reward} –¥—É–±–ª–µ–π")
    bot.edit_message_text("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{0} –¥—É–±–ª–µ–π".format(reward), user_id, call.message.message_id)
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if user['invited_by']:
        inviter = get_user(int(user['invited_by']))
        inviter['ref_progress'][user_id] = inviter['ref_progress'].get(user_id, 0) + 1
        # –ï—Å–ª–∏ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å 100 –¥—É–±–ª–µ–π
        if inviter['ref_progress'][user_id] == 3:
            inviter['balance'] += 100
            inviter['ref_friends'].add(user_id)
            bot.send_message(inviter['ref_code'], f"–¢–≤–æ–π –¥—Ä—É–≥ {user['full_name']} –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –¥—É–±–ª–µ–π.")

# --- –†–µ—Ñ–µ—Ä–∞–ª—ã ---
@bot.message_handler(func=lambda m: m.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def referral(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    ref_link = f"/start {user['ref_code']}"
    text = (
        "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 100 –¥—É–±–ª–µ–π\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞ ‚Äì {ref_link}\n"
        "–í–ê–ñ–ù–û!\n–¢–µ–±–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥—É–±–ª–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–≤–æ–π –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç 3 –∑–∞–¥–∞–Ω–∏—è."
    )
    bot.send_message(user_id, text)

@bot.message_handler(commands=['start'])
def start_with_ref(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        user_id = message.from_user.id
        user = get_user(user_id)
        if not user['invited_by'] and ref_code != str(user_id):
            user['invited_by'] = ref_code
    send_welcome(message)

# --- –û–±–º–µ–Ω –ø—Ä–∏–∑–æ–≤ ---
@bot.message_handler(func=lambda m: m.text == "–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã")
def exchange_prizes(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    text = f"–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ –ª–µ–∂–∏—Ç {user['balance']} –¥—É–±–ª–µ–π\n"
    for prize in prizes:
        if prize['cost'] > 0:
            text += f"{prize['name']} ‚Äì {prize['cost']} –¥—É–±–ª–µ–π\n"
        else:
            text += f"{prize['name']}\n"
    text += "\n–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑, –Ω–∞–ø–∏—à–∏: –ü–†–ò–ó <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
    text += "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –Ω–∞–ø–∏—à–∏: –ú–ê–†–ö–ï–¢ <—Å—Å—ã–ª–∫–∞> <—Å—Ç–æ–∏–º–æ—Å—Ç—å>"
    bot.send_message(user_id, text)

@bot.message_handler(regexp=r'^–ü–†–ò–ó (.+)')
def buy_prize(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    prize_name = message.text[5:].strip()
    prize = next((p for p in prizes if prize_name.lower() in p['name'].lower()), None)
    if not prize:
        bot.send_message(user_id, "–¢–∞–∫–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ—Ç.")
        return
    if user['balance'] < prize['cost']:
        bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= prize['cost']
    bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª {prize['cost']} –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑: {prize['name']}")

@bot.message_handler(regexp=r'^–ú–ê–†–ö–ï–¢ (.+) (\d+)')
def buy_market(message):
    user_id = message.from_user.id
    user = get_user(user_id)
    parts = message.text.split()
    link = parts[1]
    try:
        cost = int(parts[2])
    except Exception:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
        return
    if user['balance'] < cost:
        bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    user['balance'] -= cost
    bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ–±–º–µ–Ω—è–ª {cost} –¥—É–±–ª–µ–π –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {link}")

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
def support(message):
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    bot.register_next_step_handler(message, save_support)

def save_support(message):
    user_id = message.from_user.id
    support_messages.append({'user_id': user_id, 'text': message.text})
    if admin_id:
        bot.send_message(admin_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

bot.polling(none_stop=True) 