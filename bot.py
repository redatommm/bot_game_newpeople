import telebot
import os
import random
import logging
import csv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
from datetime import datetime
import re
import json
import hashlib
from apscheduler.schedulers.background import BackgroundScheduler
import time
from export_to_gsheets import main as export_to_gsheets_main
from supabase import create_client, Client
import calendar
import requests

API_TOKEN = os.getenv('TELEGRAM_TOKEN') or '7675723384:AAH6U5eib6lC82AOlfeHDA55aEPBfENerLg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)



# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
TASKS_PANEL_CHAT_ID = -1002519704761
TASKS_PANEL_THREAD_ID = 142
MODERATOR_IDS = [790005263]  # –¥–æ–±–∞–≤—å id —Å–≤–æ–∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

# --- –£–∫–∞–∑–∞—Ç—å username —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ ---
BOT_USERNAME = 'Gorod_budushego_bot'  # –ó–ê–ú–ï–ù–ò –Ω–∞ username —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ @

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[logging.FileHandler('bot.log', encoding='utf-8'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

users = {}
TASKS_FILE = 'tasks.json'

SUPABASE_URL = "https://qnsfntkhaxtcmlfrlafz.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFuc2ZudGtoYXh0Y21sZnJsYWZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4ODQxMDksImV4cCI6MjA2NzQ2MDEwOX0.wI-sZUCtEneBKZYLW0sLGZJ9XcZgCQkIfVrKjY7KN5Y"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π anon/public key
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ---
USE_SUPABASE_TASKS = False  # True ‚Äî –∏–∑ Supabase, False ‚Äî –∏–∑ tasks.json

def load_tasks():
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            loaded = json.load(f)
            changed = False
            for t in loaded:
                # –ê–≤—Ç–æ–∑–∞—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –≤ name
                orig = t['name']
                for prefix in ["daily ", "weekly ", "daily_", "weekly_"]:
                    if t['name'].startswith(prefix):
                        t['name'] = t['name'][len(prefix):]
                        changed = True
                if 'desc' not in t:
                    t['desc'] = ''
                    changed = True
            if changed:
                save_tasks(loaded)
            return loaded
    except Exception:
        return []

def get_fresh_tasks():
    if USE_SUPABASE_TASKS:
        res = supabase.table("tasks").select("*").execute()
        return res.data or []
    else:
        return load_tasks()

def save_tasks(tasks):
    if USE_SUPABASE_TASKS:
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass
    else:
        with open(TASKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)

tasks = load_tasks()

prizes = [
    {'id': 1, 'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞', 'cost': 1290},
    {'id': 2, 'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', 'cost': 1790},
    {'id': 3, 'name': '–¢–ì –ø—Ä–µ–º–∏—É–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', 'cost': 2990},
    {'id': 4, 'name': '–§—É—Ç–±–æ–ª–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'id': 5, 'name': '–ö–µ–ø–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 800},
    {'id': 6, 'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ –ù–õ (–º–µ—Ä—á)', 'cost': 1300},
    {'id': 7, 'name': '–§—É—Ç–±–æ–ª–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'id': 8, 'name': '–ö–µ–ø–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 800},
    {'id': 9, 'name': '–¢–æ–ª—Å—Ç–æ–≤–∫–∞ —Å –ª—é–±—ã–º –ø—Ä–∏–Ω—Ç–æ–º', 'cost': 1300},
]
GROUP_ID = -1002519704761
TASKS_TOPIC_ID = 3
TOPIC_ID = 53
MARKETPLACE_TOPIC_ID = 53
SUPPORT_TOPIC_ID = 54
admin_id = 790005263 # —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–π user_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_messages = []

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ (in-memory, –Ω–∞ —Å–µ—Å—Å–∏—é) ---
admin_states = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
support_states = set()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
def has_open_support(user_id):
    return user_id in support_states

def block_if_open_support(message):
    user_id = message.from_user.id
    if has_open_support(user_id):
        bot.send_message(user_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ.")
        return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ
def has_open_task(user_id):
    return hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id')

def block_if_open_task(message):
    user_id = message.from_user.id
    if has_open_task(user_id):
        task_name = get_current_task_name(user_id)
        send_temp_message(user_id, f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>", parse_mode='HTML')
        return True
    return False

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_user(user_id, username=None):
    res = supabase.table("users").select("*").eq("user_id", user_id).execute()
    if res.data:
        user = res.data[0]
        user['tasks_done'] = set(map(int, user['tasks_done'].split(','))) if user.get('tasks_done') else set()
        user['ref_friends'] = set(map(int, user['ref_friends'].split(','))) if user.get('ref_friends') else set()
        try:
            user['ref_progress'] = json.loads(user['ref_progress']) if user.get('ref_progress') else {}
        except (json.JSONDecodeError, TypeError):
            user['ref_progress'] = {}
        return user
    # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å
    user = {
        'user_id': user_id,
        'full_name': '',
        'age': 0,
        'city': '',
        'balance': 0,
        'ref_code': str(user_id),
        'invited_by': '',
        'tasks_done': '',
        'ref_friends': '',
        'ref_progress': json.dumps({}),
        'username': username or '',
        'last_daily': None,
        'daily_streak': 0,
        'weekly_earned': 0,
        'phone': '',
    }
    supabase.table("users").insert(user).execute()
    user['tasks_done'] = set()
    user['ref_friends'] = set()
    user['ref_progress'] = {}
    return user

def save_user(user):
    # tasks_done, ref_friends, ref_progress —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    user_db = user.copy()
    user_db['tasks_done'] = ','.join(map(str, user.get('tasks_done', set())))
    user_db['ref_friends'] = ','.join(map(str, user.get('ref_friends', set())))
    user_db['ref_progress'] = json.dumps(user.get('ref_progress', {}))
    supabase.table("users").update(user_db).eq("user_id", user['user_id']).execute()

def get_user_by_ref_code(ref_code):
    res = supabase.table("users").select("*").eq("ref_code", ref_code).execute()
    if not res.data:
        return None
    user = res.data[0]
    user['tasks_done'] = set(map(int, user['tasks_done'].split(','))) if user.get('tasks_done') else set()
    user['ref_friends'] = set(map(int, user['ref_friends'].split(','))) if user.get('ref_friends') else set()
    try:
        user['ref_progress'] = json.loads(user['ref_progress']) if user.get('ref_progress') else {}
    except (json.JSONDecodeError, TypeError):
        user['ref_progress'] = {}
    return user

def send_temp_message(chat_id, text, delay=5, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    threading.Timer(delay, lambda: safe_delete_message(chat_id, msg.message_id)).start()
    return msg

def safe_delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

# --- –ú–µ–Ω—é –∏ —Ä–∞–∑–¥–µ–ª—ã ---
def show_section(call, text, markup):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=markup,
            parse_mode='HTML'
        )
        logging.info(f"edit_message_text: {text[:30]}...")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ edit_message_text: {e}")
        msg = bot.send_message(call.from_user.id, text, reply_markup=markup, parse_mode='HTML')
        logging.info(f"send_message: {text[:30]}...")
        try:
            bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        except:
            pass

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_reply_markup(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"), KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏"))
    markup.add(KeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π"), KeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã"))
    markup.add(KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton("üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"))
    markup.add(KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É"), KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞"))
    if user_id == admin_id:
        markup.add(KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return markup

def return_to_main_menu(call=None, user_id=None):
    if call is not None:
        user_id = call.from_user.id
        if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
            task_name = get_current_task_name(user_id)
            if task_name:
                send_temp_message(user_id, f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>", parse_mode='HTML')
            else:
                send_temp_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
            return
        bot.clear_step_handler_by_chat_id(user_id)
        markup = main_menu_reply_markup(user_id)
        bot.send_message(user_id, "\u2B50 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        try:
            bot.answer_callback_query(call.id)
        except Exception:
            pass
    elif user_id is not None:
        if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
            task_name = get_current_task_name(user_id)
            if task_name:
                send_temp_message(user_id, f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>", parse_mode='HTML')
            else:
                send_temp_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
            return
        bot.clear_step_handler_by_chat_id(user_id)
        markup = main_menu_reply_markup(user_id)
        bot.send_message(user_id, "\u2B50 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        logging.info(f"send_message –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: user_id={user_id}")
    else:
        logging.error('return_to_main_menu: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω call –∏ user_id!')

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.isdigit():
            ref_user = get_user_by_ref_code(ref_code)
            if ref_user and ref_user['user_id'] != user_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                user = get_user(user_id, message.from_user.username)
                if not user.get('invited_by'):
                    user['invited_by'] = ref_code
                    save_user(user)
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    ref_user['ref_friends'].add(user_id)
                    if not isinstance(ref_user['ref_progress'], dict):
                        ref_user['ref_progress'] = {}
                    ref_user['ref_progress'][str(user_id)] = 0
                    save_user(ref_user)
    
    user = get_user(user_id, message.from_user.username)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if not user.get('full_name') or not user.get('age') or not user.get('city') or not user.get('phone'):
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–º —Å–ª–æ–≤–æ–º –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ù–µ–π—Ä–æ –ú—ç–Ω, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –∏–≥—Ä–µ.\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å __–î—É–±–ª–∏__, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        )
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        text = text.replace('.', '\\.') \
                   .replace('!', '\\!') \
                   .replace('-', '\\-') \
                   .replace('(', '\\(') \
                   .replace(')', '\\)')
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="start_game"))
        bot.send_message(user_id, text, reply_markup=markup, parse_mode="MarkdownV2")
        return
        # --- —Å—Ç–∞—Ä—ã–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏–∂–µ ---
        if not user.get('full_name'):
            bot.send_message(user_id, "–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–∞–º–∏–ª–∏—è –∏ –ò–º—è)")
            bot.register_next_step_handler(message, reg_full_name)
            return
        if not user.get('age'):
            bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
            bot.register_next_step_handler(message, reg_age)
            return
        if not user.get('city'):
            ask_city(message)
            return
        if not user.get('phone'):
            ask_phone(message)
            return
        return
    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    return_to_main_menu(message)

@bot.callback_query_handler(func=lambda call: call.data == 'start_game')
def start_game_callback(call):
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    if user['full_name']:
        return_to_main_menu(call, user_id)
        return
    user['balance'] += 10
    save_user(user)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>+10 –¥—É–±–ª–µ–π!</b>\n\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å!\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–∞–º–∏–ª–∏—è –∏ –ò–º—è)",
        parse_mode='HTML'
    )
    bot.register_next_step_handler(call.message, reg_full_name)

def reg_full_name(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"reg_full_name: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    if not getattr(message, 'text', None):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_full_name)
        return
    name = str(message.text).strip()
    if len(name.split()) < 2 or not re.match(r'^[–ê-–Ø–∞-—èA-Za-z–Å—ë\- ]+$', name):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_full_name)
        return
    name = ' '.join([part.capitalize() for part in name.split()])
    user['full_name'] = name
    print(f"reg_full_name: save_user {user_id}")
    save_user(user)
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, reg_age)

def reg_age(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"reg_age: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    if not getattr(message, 'text', None):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_age)
        return
    if not str(message.text).isdigit():
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_age)
        return
    try:
        age = int(message.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {message.text} ({e})")
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_age)
        return
    if age < 10 or age > 100:
        bot.send_message(user_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_age)
        return
    user['age'] = age
    print(f"reg_age: save_user {user_id}")
    save_user(user)
    ask_city(message)

def ask_city(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"ask_city: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", callback_data="city_rostov"),
        telebot.types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_other")
    )
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["city_rostov", "city_other"])
def city_choice_callback(call):
    if getattr(call.from_user, 'is_bot', False):
        print(f"city_choice_callback: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={call.from_user.id}")
        return
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    if call.data == "city_rostov":
        user['city'] = "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
        print(f"city_choice_callback: save_user {user_id}")
        save_user(user)
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π message —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è ask_phone
        class FakeMessage:
            def __init__(self, from_user, chat):
                self.from_user = from_user
                self.chat = chat
        fake_message = FakeMessage(call.from_user, call.message.chat)
        ask_phone(fake_message)
    else:
        bot.edit_message_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –ø–æ –ø—Ä–æ–ø–∏—Å–∫–µ:", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler_by_chat_id(user_id, reg_city_manual)

def reg_city_manual(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"reg_city_manual: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    if not getattr(message, 'text', None):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_city_manual)
        return
    city = str(message.text).strip().lower().replace('—ë', '–µ')
    if not re.match(r'^[–∞-—èa-z\- ]{2,}$', city, re.IGNORECASE):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, reg_city_manual)
        return
    city = ' '.join([part.capitalize() for part in city.split()])
    user['city'] = city
    print(f"reg_city_manual: save_user {user_id}")
    save_user(user)
    ask_phone(message)

def ask_phone(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"ask_phone: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ Telegram", request_contact=True))
    markup.add(KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é"))
    bot.send_message(user_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_phone)

def handle_phone(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"handle_phone: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    phone = None
    if hasattr(message, 'contact') and message.contact and getattr(message.contact, 'phone_number', None):
        phone = str(message.contact.phone_number)
    elif getattr(message, 'text', None) and "–≤–≤–µ—Å—Ç–∏" in message.text.lower():
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        bot.register_next_step_handler(message, handle_phone_manual)
        return
    elif getattr(message, 'text', None):
        phone = str(message.text).strip()
    if not phone or not re.match(r'^\+?\d{10,15}$', phone):
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ Telegram", request_contact=True))
        markup.add(KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é"))
        bot.send_message(user_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_phone)
        return
    user['phone'] = phone
    user['balance'] += 25
    print(f"handle_phone: save_user {user_id}")
    save_user(user)
    first_name = str(user.get('full_name', '')).split()[1] if len(str(user.get('full_name', '')).split()) > 1 else str(user.get('full_name', '')).split()[0] if user.get('full_name', '') else ''
    bot.send_message(
        user_id,
        f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–≥—Ä–æ–∫ ¬´{first_name}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n+25 –¥—É–±–ª–µ–π –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ü–æ–µ—Ö–∞–ª–∏!",
        parse_mode='HTML'
    )
    bot.clear_step_handler_by_chat_id(user_id)
    return_to_main_menu(None, user_id)

def handle_phone_manual(message):
    if getattr(message.from_user, 'is_bot', False):
        print(f"handle_phone_manual: –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ user_id={message.from_user.id}")
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    if not getattr(message, 'text', None):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        bot.register_next_step_handler(message, handle_phone_manual)
        return
    phone = str(message.text).strip()
    if not re.match(r'^\+?\d{10,15}$', phone):
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        bot.register_next_step_handler(message, handle_phone_manual)
        return
    user['phone'] = phone
    user['balance'] += 25
    print(f"handle_phone_manual: save_user {user_id}")
    save_user(user)
    first_name = str(user.get('full_name', '')).split()[1] if len(str(user.get('full_name', '')).split()) > 1 else str(user.get('full_name', '')).split()[0] if user.get('full_name', '') else ''
    bot.send_message(
        user_id,
        f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∏–≥—Ä–æ–∫ ¬´{first_name}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n+25 –¥—É–±–ª–µ–π –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ü–æ–µ—Ö–∞–ª–∏!",
        parse_mode='HTML'
    )
    bot.clear_step_handler_by_chat_id(user_id)
    return_to_main_menu(None, user_id)

# --- –ú–µ–Ω—é ---
@bot.message_handler(func=lambda m: m.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π")
def show_balance(message, back_btn=False):
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.message.chat.id
    user = get_user(user_id, message.from_user.username)
    text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0"
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="get_daily_bonus"))
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É")
def about_game(message, back_btn=False):
    text = (
        "<b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–ü—Ä–æ—Å—Ç–∞—è, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, –ø–æ–ª—É—á–∞—Ç—å <b>–¥—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        "–° –Ω–∞–º–∏ —Ç—ã –ª—É—á—à–µ –∏–∑—É—á–∏—à—å –≥–æ—Ä–æ–¥, –ø–æ—É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö, —É–∑–Ω–∞–µ—à—å –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏ –∫–ª–∞—Å—Å–Ω–æ –ø—Ä–æ–≤–µ–¥—ë—à—å –≤—Ä–µ–º—è.\n\n"
        "<b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n\n"
        "<b>–ó–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥—É–±–ª–∏:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É\n"
        "‚Ä¢ –ü–æ–±–µ–¥–∞ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ\n\n"
        "<i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
    )
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(message.from_user.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
def rules(message, back_btn=False):
    text = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã</b>\n\n"
        "1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ!</b>\n"
        "2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1</b>\n\n"
        "<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, –ø–æ—à–ª–æ—Å—Ç—å (–≤ —Ç.—á. –≤–∏–∑—É–∞–ª—å–Ω–∞—è).\n\n"
        "<b>–û–±–º–µ–Ω –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã</b>\n"
        "‚Ä¢ –î—É–±–ª–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n"
        "‚Ä¢ –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª ‚Äî –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥—É–±–ª–µ–π\n"
        "\n–£–¥–∞—á–∏ –∏ —á–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=back_markup())
    else:
        bot.send_message(message.from_user.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
def task_list(message, back_btn=False):
    remind_daily_bonus(message.from_user.id)
    user_id = message.from_user.id
    # –ó–∞—â–∏—Ç–∞: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
        task_name = get_current_task_name(user_id)
        if task_name:
            send_temp_message(user_id, f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>", parse_mode='HTML')
        else:
            send_temp_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    bot.clear_step_handler_by_chat_id(user_id)
    global tasks
    tasks = get_fresh_tasks()
    user = get_user(user_id, message.from_user.username)
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    daily = [t for t in tasks if t.get('category') == 'daily']
    weekly = [t for t in tasks if t.get('category') == 'weekly']
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
    markup_daily = telebot.types.InlineKeyboardMarkup()
    daily_left = 0
    for task in daily:
        if task['id'] in user['tasks_done']:
            continue
        daily_left += 1
        name = task['name']
        btn_text = f"üî≤ {name} (+{task['reward']} –¥—É–±–ª–µ–π)"
        markup_daily.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
    if daily_left:
        text = "<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>"
        bot.send_message(user_id, text, reply_markup=markup_daily, parse_mode='HTML')
    else:
        bot.send_message(user_id, "<b>–í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>", parse_mode='HTML')
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ
    markup_weekly = telebot.types.InlineKeyboardMarkup()
    weekly_left = 0
    for task in weekly:
        if task['id'] in user['tasks_done']:
            continue
        weekly_left += 1
        name = task['name']
        btn_text = f"üî≤ {name} (+{task['reward']} –¥—É–±–ª–µ–π)"
        markup_weekly.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"do_task_{task['id']}"))
    if weekly_left:
        text = "<b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>"
        bot.send_message(user_id, text, reply_markup=markup_weekly, parse_mode='HTML')
    else:
        bot.send_message(user_id, "<b>–í—Å–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('do_task_'))
def do_task(call):
    user_id = call.from_user.id
    # --- –ó–∞—â–∏—Ç–∞: –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ ---
    if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    user = get_user(user_id, call.from_user.username)
    try:
        task_id = int(call.data.split('_')[-1])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_id –≤ do_task: {call.data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è
    global tasks
    tasks = get_fresh_tasks()
    # –ü—Ä–æ—Å–∏–º –ø—Ä—É—Ñ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    bot.answer_callback_query(call.id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_proof"))
    task = next((t for t in tasks if t['id']==task_id), None)
    desc = task['desc'] if task and task.get('desc') else ''
    task_name = task['name'] if task else ''
    text = f"<b>üìù –ó–∞–¥–∞–Ω–∏–µ:</b> <b>{task_name}</b>"
    if desc:
        text += f"\n\n{desc}"
    text += "\n\n<em>üì∑ –ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.</em>"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ user_data –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if not hasattr(bot, 'user_data'):
        bot.user_data = {}
    bot.user_data[user_id] = {'task_id': task_id, 'msg_id': call.message.message_id}
    msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    bot.register_next_step_handler(msg, handle_proof, task_id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_proof')
def cancel_proof(call):
    user_id = call.from_user.id
    # –û—á–∏—â–∞–µ–º user_data
    if hasattr(bot, 'user_data') and user_id in bot.user_data:
        del bot.user_data[user_id]
    bot.clear_step_handler_by_chat_id(user_id)
    bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", call.message.chat.id, call.message.message_id)
    return_to_main_menu(call, user_id)

def handle_proof(message, task_id):
    user_id = message.from_user.id
    # --- –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ) –∫–∞–∫ –ø—Ä—É—Ñ ---
    if message.content_type != 'photo':
        send_temp_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ.")
        bot.register_next_step_handler(message, handle_proof, task_id)
        return
    proof_type = 'photo'
    proof_data = message.photo[-1].file_id
    add_pending_task(user_id, task_id, proof_type, proof_data)
    markup_return = InlineKeyboardMarkup()
    markup_return.add(InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data="menu_tasks"))
    send_temp_message(user_id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –ü–æ–∫–∞ –æ–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è.", delay=10, reply_markup=markup_return)
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî —É–¥–∞–ª—è–µ–º task_id –∏–∑ user_data –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è
    if hasattr(bot, 'user_data') and user_id in bot.user_data:
        msg_id = bot.user_data[user_id].pop('msg_id', None)
        bot.user_data[user_id].pop('task_id', None)
        if msg_id:
            safe_delete_message(user_id, msg_id)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    global tasks
    tasks = get_fresh_tasks()
    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ
    task_name = next((t['name'] for t in tasks if t['id']==task_id),'')
    user = get_user(user_id, message.from_user.username)
    username = user.get('username')
    if username:
        username_str = f" (@{username})"
    else:
        username_str = ""
    text = f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è:</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
               InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}"))
    if proof_type == 'photo':
        bot.send_photo(GROUP_ID, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
    elif proof_type == 'document':
        bot.send_document(GROUP_ID, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(GROUP_ID, text + f"\n\n–ü—Ä—É—Ñ: {proof_data}", parse_mode='HTML', reply_markup=markup)

# --- –†–µ—Ñ–µ—Ä–∞–ª—ã ---
@bot.message_handler(func=lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def referral(message, back_btn=False):
    if block_if_open_task(message):
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    ref_link = f"https://t.me/{BOT_USERNAME}?start={user['ref_code']}"
    text = (
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 50 –¥—É–±–ª–µ–π!\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ\n"
        "–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É ‚Äî –ø—É—Å—Ç—å –∑–∞—Ö–æ–¥–∏—Ç!\n\n"
        "<b>–í–ê–ñ–ù–û!</b> –î—É–±–ª–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç 3 –∑–∞–¥–∞–Ω–∏—è.\n"
    )
    # –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    markup = InlineKeyboardMarkup()
    if user['ref_friends']:
        text += "\n<b>–¢–≤–æ–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>\n"
        for fid in user['ref_friends']:
            fuser = get_user(fid)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä username
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            done = 0
            for key, value in user['ref_progress'].items():
                if str(key) == str(fid) and isinstance(value, (int, float)):
                    done = int(value)
                    break
            username = fuser.get('username')
            if username:
                link = f'<a href="https://t.me/{username}">{fuser["full_name"]}</a>'
            else:
                link = fuser["full_name"]
            text += f"‚Ä¢ {link} ‚Äî <b>{done}/3 –∑–∞–¥–∞–Ω–∏–π</b>\n"
    else:
        text += "\n–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π."
    if back_btn:
        markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=markup)
        bot.send_message(user_id, ref_link)
    else:
        markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)
        bot.send_message(user_id, ref_link)

# --- –û–±–º–µ–Ω –ø—Ä–∏–∑–æ–≤ ---
@bot.message_handler(func=lambda m: m.text == "üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã")
def exchange_prizes(message, back_btn=False):
    if block_if_open_task(message):
        return
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n"
    
    markup = InlineKeyboardMarkup(row_width=1)
    for prize in prizes:
        if prize['cost'] > 0:
            text += f"‚Ä¢ {prize['name']} ‚Äî <b>{prize['cost']} –¥—É–±–ª–µ–π</b>\n"
            if user['balance'] >= prize['cost']:
                markup.add(InlineKeyboardButton(f"üéÅ {prize['name']}", callback_data=f"request_prize_{prize['id']}_{prize['cost']}"))
        else:
            text += f"‚Ä¢ {prize['name']}\n"
    # –ö–Ω–æ–ø–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ >= 400 –¥—É–±–ª–µ–π
    if user['balance'] >= 400:
        markup.add(InlineKeyboardButton("üõí –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞", callback_data="marketplace_prize"))
    # –ò–Ω—Ñ–æ-–±–ª–æ–∫ –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (–≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É)
    text += "\n<b>–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –î—É–±–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤, –µ—Å–ª–∏ –¥—É–±–ª–µ–π –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ (–º–∏–Ω–∏–º—É–º 400)</b>"
    text += "\n<i>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 400 –¥—É–±–ª–µ–π.</i>"
    if back_btn:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'marketplace_prize')
def marketplace_prize_callback(call):
    remind_daily_bonus(call.from_user.id)
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    if user['balance'] < 400:
        bot.answer_callback_query(call.id, "–ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π")
        return
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(telebot.types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
    bot.send_message(user_id, "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∞ —Ç–∞–∫–∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://ozon.ru/... 1200)", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, handle_marketplace_prize)

def handle_marketplace_prize(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞
    if message.text and message.text.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
        bot.send_message(user_id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=telebot.types.ReplyKeyboardRemove())
        return_to_main_menu(None, user_id)
        return
    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é –∏ –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä
    menu_texts = [
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π", "‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É", "üìú –ü—Ä–∞–≤–∏–ª–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞", "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π",
        "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì• –í—ã–≥—Ä—É–∑–∫–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏—è",
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    if message.text in menu_texts:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—É–±–ª—è–º–∏.", reply_markup=telebot.types.ReplyKeyboardRemove())
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(telebot.types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
        bot.send_message(user_id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_marketplace_prize)
        return
    text = str(getattr(message, 'text', '') or '')
    cost = None
    link_or_name = None
    file_id = None
    if message.content_type == 'photo':
        link_or_name = '<—Å–∫—Ä–∏–Ω—à–æ—Ç>'
        file_id = message.photo[-1].file_id
        if getattr(message, 'caption', None):
            text = str(message.caption or '')
    parts = text.strip().split()
    for part in reversed(parts):
        if part.isdigit():
            cost = int(part)
            break
    if not cost:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(telebot.types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—É–±–ª—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://ozon.ru/... 1200)", reply_markup=markup)
        bot.register_next_step_handler(message, handle_marketplace_prize)
        return
    if user['balance'] < cost:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!", reply_markup=telebot.types.ReplyKeyboardRemove())
        return
    if not link_or_name:
        link_or_name = str(text.replace(str(cost), '').strip() or '')
    safe_full_name = str(user.get('full_name') or '')
    safe_link_or_name = str(link_or_name or '')
    # --- Supabase insert ---
    res = supabase.table("prize_requests").insert({
        'user_id': user_id,
        'prize_name': '[–ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°]',
        'prize_cost': cost,
        'user_balance': user['balance'],
        'additional_info': safe_link_or_name,
        'status': 'pending',
        'created_at': datetime.now().isoformat()
    }).execute()
    request_id = res.data[0]['id'] if res.data and 'id' in res.data[0] else None
    user['balance'] -= cost
    save_user(user)
    desc = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{safe_full_name}</a>\n–ü—Ä–∏–∑ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {safe_link_or_name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –¥—É–±–ª–µ–π\nID –∑–∞—è–≤–∫–∏: {request_id}"
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_marketplace_{request_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_marketplace_{request_id}")
    )
    if file_id:
        msg = bot.send_photo(GROUP_ID, file_id, caption=desc, parse_mode='HTML', reply_markup=markup)
    else:
        msg = bot.send_message(GROUP_ID, desc, parse_mode='HTML', reply_markup=markup)
    supabase.table("prize_requests").update({'group_message_id': msg.message_id}).eq("id", request_id).execute()
    bot.send_message(user_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∏—Å–∞–Ω–æ: {cost} –¥—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=telebot.types.ReplyKeyboardRemove())

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_support')
def cancel_support_callback(call):
    user_id = call.from_user.id
    support_states.discard(user_id)
    bot.clear_step_handler_by_chat_id(user_id)
    bot.edit_message_text("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
    return_to_main_menu(call, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_marketplace_') or call.data.startswith('reject_marketplace_'))
def handle_marketplace_moderation(call):
    data = call.data
    approve = data.startswith('approve_marketplace_')
    request_id = int(data.split('_')[-1])
    res = supabase.table("prize_requests").select("user_id, prize_cost, group_message_id").eq("id", request_id).execute()
    if not res.data:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    user_id = res.data[0]['user_id']
    cost = res.data[0]['prize_cost']
    group_msg_id = res.data[0]['group_message_id']
    if approve:
        supabase.table("prize_requests").update({'status': 'approved'}).eq("id", request_id).execute()
        bot.send_message(user_id, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–∞.")
        bot.edit_message_reply_markup(GROUP_ID, group_msg_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–û–¥–æ–±—Ä–µ–Ω–æ")
    else:
        supabase.table("prize_requests").update({'status': 'rejected'}).eq("id", request_id).execute()
        user = get_user(user_id)
        user['balance'] += cost
        save_user(user)
        bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –î—É–±–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        bot.edit_message_reply_markup(GROUP_ID, group_msg_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")



# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
def support(message, back_btn=False):
    if block_if_open_support(message):
        return
    user_id = message.from_user.id
    support_states.add(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support"))
    bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=markup)
    bot.register_next_step_handler(message, save_support)

def save_support(message):
    user_id = message.from_user.id
    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ ---
    menu_texts = [
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –¥—É–±–ª–µ–π", "‚ÑπÔ∏è –ü—Ä–æ –∏–≥—Ä—É", "üìú –ü—Ä–∞–≤–∏–ª–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞", "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π",
        "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì• –í—ã–≥—Ä—É–∑–∫–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏—è",
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text in menu_texts or message.text.startswith("–ü–†–ò–ó ") or message.text.startswith("–ú–ê–†–ö–ï–¢ "):
        send_temp_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.")
        bot.register_next_step_handler(message, save_support)
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    user = get_user(user_id, message.from_user.username)
    username = user.get('username')
    if username:
        username_str = f" (@{username})"
    else:
        username_str = ""
    
    text = f"<b>üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        msg = bot.send_message(GROUP_ID, text, parse_mode='HTML')
        support_messages.append({
            'user_id': user_id, 
            'text': message.text, 
            'group_message_id': msg.message_id,
            'timestamp': datetime.now().isoformat()
        })
        send_temp_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", delay=10)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
    send_temp_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", delay=10)
    support_states.discard(user_id)
    return_to_main_menu(None, user_id)

@bot.message_handler(commands=['export_users'])
def export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users, columns = get_all_users()
    filename = 'users_export.csv'
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(columns)
        for u in users:
            writer.writerow([u.get(col, '') for col in columns])
        f.flush()
        os.fsync(f.fileno())
    with open(filename, 'rb') as f:
        bot.send_document(admin_id, f, caption='–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda m: m.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞")
def admin_export_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    export_users(message)

@bot.message_handler(func=lambda m: m.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏")
def weekly_rating(message):
    user_id = message.from_user.id
    # –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –ø–æ –±–∞–ª–∞–Ω—Å—É
    res = supabase.table('users').select('user_id,full_name,balance').order('balance', desc=True).order('user_id', desc=False).limit(100).execute()
    rows = res.data
    top = rows[:10]
    text = '<b>üèÜ –¢–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n'
    for i, row in enumerate(top, 1):
        text += f"{i}. {row['full_name']} ‚Äî {row['balance']} {plural_dubl(row['balance'])}\n"
    # –ú–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    place = next((i+1 for i, row in enumerate(rows) if row['user_id']==user_id), None)
    my_balance = next((row['balance'] for row in rows if row['user_id']==user_id), 0)
    if place:
        text += f"\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ:</b> {place} –∏–∑ {len(rows)} (—É —Ç–µ–±—è {my_balance} {plural_dubl(my_balance)})"
    else:
        text += "\n–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."
    bot.send_message(user_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_stats(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    res = supabase.table('users').select('user_id,balance').execute()
    rows = res.data
    total = len(rows)
    rich = sum(1 for row in rows if row['balance'] >= 400)
    bot.send_message(admin_id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–° –±–∞–ª–∞–Ω—Å–æ–º 400+ –¥—É–±–ª–µ–π: <b>{rich}</b>", parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def admin_users(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    res = supabase.table('users').select('user_id,full_name,balance').limit(20).execute()
    rows = res.data
    text = '<b>–ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
    for row in rows:
        text += f"ID: <code>{row['user_id']}</code> | {row['full_name']} | üí∞ {row['balance']} –¥—É–±–ª–µ–π\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥")
def admin_top_rating(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    res = supabase.table('users').select('user_id,full_name,balance').order('balance', desc=True).order('user_id', desc=False).limit(100).execute()
    rows = res.data
    text = '<b>üèÜ –¢–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n'
    for i, row in enumerate(rows[:10], 1):
        text += f"{i}. {row['full_name']} ‚Äî {row['balance']} {plural_dubl(row['balance'])}\n"
    place = next((i+1 for i, row in enumerate(rows) if row['user_id']==admin_id), None)
    my_balance = next((row['balance'] for row in rows if row['user_id']==admin_id), 0)
    if place:
        text += f"\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ:</b> {place} –∏–∑ {len(rows)} (—É —Ç–µ–±—è {my_balance} {plural_dubl(my_balance)})"
    else:
        text += "\n–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."
    bot.send_message(admin_id, text, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è")
def admin_support(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not support_messages:
        bot.send_message(admin_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return
    text = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n'
    for msg in support_messages[-10:]:
        user = get_user(msg['user_id'])
        timestamp = msg.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        group_msg_id = msg.get('group_message_id', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É')
        text += f"ID: <code>{msg['user_id']}</code> | {user['full_name']} | {timestamp}\n"
        text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg['text'][:50]}{'...' if len(msg['text']) > 50 else ''}\n"
        text += f"ID –≤ –≥—Ä—É–ø–ø–µ: {group_msg_id}\n\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(func=lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def to_admin_panel(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = True
    show_admin_panel(message)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞")
def to_user_menu(message):
    if message.from_user.id != admin_id:
        return
    admin_states[admin_id] = False
    return_to_main_menu(None, message.from_user.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_') or call.data == 'back_to_menu')
def handle_main_menu(call):
    user_id = call.from_user.id
    if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    bot.clear_step_handler_by_chat_id(user_id)
    data = call.data
    logging.info(f"Callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if data == "menu_tasks":
        # –ù–æ–≤—ã–π UX: –≤—ã–∑—ã–≤–∞–µ–º task_list
        class FakeMessage:
            def __init__(self, from_user):
                self.from_user = from_user
                self.text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"
        fake_message = FakeMessage(call.from_user)
        task_list(fake_message)
        return
    elif data == "menu_rating":
        # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π message-–æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ weekly_rating
        class FakeMessage:
            def __init__(self, from_user):
                self.from_user = from_user
        fake_message = FakeMessage(call.from_user)
        weekly_rating(fake_message)
        return
    elif data == "menu_prizes":
        user = get_user(user_id, call.from_user.username)
        text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n"
        
        markup = InlineKeyboardMarkup(row_width=1)
        
        for prize in prizes:
            if prize['cost'] > 0:
                text += f"‚Ä¢ {prize['name']} ‚Äî <b>{prize['cost']} –¥—É–±–ª–µ–π</b>\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π
                if user['balance'] >= prize['cost']:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø—Ä–∏–∑–∞ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback_data
                    markup.add(InlineKeyboardButton(f"üéÅ {prize['name']}", callback_data=f"request_prize_{prize['id']}_{prize['cost']}"))
            else:
                text += f"‚Ä¢ {prize['name']}\n"
        
        text += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–ú–ê–†–ö–ï–¢ &lt;—Å—Å—ã–ª–∫–∞&gt; &lt;—Å—Ç–æ–∏–º–æ—Å—Ç—å&gt;</code></i>"
        
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        show_section(call, text, markup)
    elif data == "menu_balance":
        user = get_user(user_id, call.from_user.username)
        text = f"<b>–í —Ç–≤–æ–µ–º —Ä—é–∫–∑–∞–∫–µ:</b> <code>{user['balance']}</code> –¥—É–±–ª–µ–π \U0001F4B0"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_ref":
        # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π message-–æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ referral
        class FakeMessage:
            def __init__(self, from_user, message):
                self.from_user = from_user
                self.message = message
        fake_message = FakeMessage(call.from_user, call.message)
        referral(fake_message, back_btn=True)
    elif data == "menu_about":
        text = "<b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        text += "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, –ø–æ–ª—É—á–∞–π <b>–¥—É–±–ª–∏</b> –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        text += "<b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ\n\n"
        text += "<b>–ó–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥—É–±–ª–∏:</b>\n"
        text += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        text += "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É\n\n"
        text += "<i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_rules":
        text = "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –æ–±–º–µ–Ω–∞ –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã</b>\n\n"
        text += "1Ô∏è‚É£ <b>–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –≤—Å–µ–º –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ!</b>\n"
        text += "2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1</b>\n\n"
        text += "<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç, –ø–æ—à–ª–æ—Å—Ç—å (–≤ —Ç.—á. –≤–∏–∑—É–∞–ª—å–Ω–∞—è).\n\n"
        text += "<b>–û–±–º–µ–Ω –¥—É–±–ª–µ–π –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n"
        text += "‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 400 –¥—É–±–ª–µ–π\n"
        text += "‚Ä¢ –ü—Ä–∏–∑—ã ‚Äî —Å–º–æ—Ç—Ä–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>–û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã</b>\n"
        text += "‚Ä¢ –î—É–±–ª–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n"
        text += "‚Ä¢ –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª ‚Äî –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥—É–±–ª–µ–π\n"
        "\n–£–¥–∞—á–∏ –∏ —á–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã!"
        markup = back_markup()
        show_section(call, text, markup)
    elif data == "menu_support":
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support"))
        text = "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
        show_section(call, text, markup)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.register_next_step_handler_by_chat_id(user_id, save_support)
    elif data == "menu_admin" and user_id == admin_id:
        admin_states[admin_id] = True
        show_admin_panel(call)
        bot.answer_callback_query(call.id)
        return
    elif data == "back_to_menu":
        return_to_main_menu(call, user_id)
        return
    bot.answer_callback_query(call.id)

def show_admin_panel(call):
    text = "<b>üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∫–∞", callback_data="admin_export"),
        InlineKeyboardButton("üì® –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_support"),
        InlineKeyboardButton("üéÅ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∑—ã", callback_data="admin_prize_requests"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏", callback_data="admin_add_balance"),
        InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏", callback_data="admin_sub_balance"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", callback_data="tasks_admin_panel"),
        InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è", callback_data="admin_new_week"),
        InlineKeyboardButton("üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_top_rating"),
        InlineKeyboardButton("üí∞ –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤", callback_data="admin_reset_balances"),
        InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞", callback_data="back_to_menu")
    )
    show_section(call, text, markup)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
admin_action_state = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_') or call.data == 'back_to_menu')
def handle_admin_panel(call):
    user_id = call.from_user.id
    if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    bot.clear_step_handler_by_chat_id(user_id)
    data = call.data
    if user_id != admin_id:
        bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if data == "admin_add_balance":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–µ–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        admin_action_state['action'] = 'add_balance'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    elif data == "admin_sub_balance":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ —É–±—Ä–∞—Ç—å –¥—É–±–ª–µ–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        admin_action_state['action'] = 'sub_balance'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    elif data == "admin_delete_user":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        admin_action_state['action'] = 'delete_user'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)
        return
    elif data == "admin_broadcast":
        bot.send_message(admin_id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        admin_action_state['action'] = 'broadcast_text'
        bot.register_next_step_handler_by_chat_id(admin_id, admin_broadcast_step)
        return
    elif data == "admin_stats":
        res = supabase.table('users').select('user_id,balance').execute()
        rows = res.data
        total = len(rows)
        rich = sum(1 for row in rows if row['balance'] >= 400)
        text = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–° –±–∞–ª–∞–Ω—Å–æ–º 400+ –¥—É–±–ª–µ–π: <b>{rich}</b>"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_users":
        res = supabase.table('users').select('user_id,full_name,balance').limit(20).execute()
        rows = res.data
        text = '<b>–ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
        for row in rows:
            text += f"ID: <code>{row['user_id']}</code> | {row['full_name']} | üí∞ {row['balance']} –¥—É–±–ª–µ–π\n"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_export":
        res = supabase.table('users').select('*').execute()
        rows = res.data
        filename = 'users_export.csv'
        import csv
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'full_name', 'age', 'city', 'balance', 'ref_code', 'invited_by', 'ref_friends', 'ref_progress', 'tasks_done', 'weekly_earned'])
            for row in rows:
                writer.writerow([
                    row.get('user_id'), row.get('full_name'), row.get('age'), row.get('city'), row.get('balance'),
                    row.get('ref_code'), row.get('invited_by'), row.get('ref_friends'), row.get('ref_progress'),
                    row.get('tasks_done'), row.get('weekly_earned')
                ])
        with open(filename, 'rb') as f:
            bot.send_document(admin_id, f, caption='–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        bot.answer_callback_query(call.id, "–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    elif data == "admin_new_week":
        supabase.table('users').update({'weekly_earned': 0}).neq('user_id', 0).execute()
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å! –†–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω.")
        return
    elif data == "admin_top_rating":
        res = supabase.table('users').select('user_id,full_name,balance').order('balance', desc=True).order('user_id', desc=False).limit(100).execute()
        rows = res.data
        text = '<b>üèÜ –¢–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n'
        for i, row in enumerate(rows[:10], 1):
            text += f"{i}. {row['full_name']} ‚Äî {row['balance']} {plural_dubl(row['balance'])}\n"
        place = next((i+1 for i, row in enumerate(rows) if row['user_id']==user_id), None)
        my_balance = next((row['balance'] for row in rows if row['user_id']==user_id), 0)
        if place:
            text += f"\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ:</b> {place} –∏–∑ {len(rows)} (—É —Ç–µ–±—è {my_balance} {plural_dubl(my_balance)})"
        else:
            text += "\n–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."
        bot.send_message(user_id, text, parse_mode='HTML')
        return
    elif data == "admin_reset_balances":
        supabase.table('users').update({'balance': 0}).neq('user_id', 0).execute()
        bot.send_message(admin_id, "‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0!")
        show_admin_panel(call)
        return
    elif data == "admin_support":
        if not support_messages:
            text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π."
        else:
            text = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n'
            for msg in support_messages[-10:]:
                user = get_user(msg['user_id'])
                timestamp = msg.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                group_msg_id = msg.get('group_message_id', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É')
                text += f"ID: <code>{msg['user_id']}</code> | {user['full_name']} | {timestamp}\n"
                text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg['text'][:50]}{'...' if len(msg['text']) > 50 else ''}\n"
                text += f"ID –≤ –≥—Ä—É–ø–ø–µ: {group_msg_id}\n\n"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_prize_requests":
        requests = get_pending_prize_requests()
        if not requests:
            text = "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–∏–∑—ã."
        else:
            text = '<b>üéÅ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∑—ã:</b>\n\n'
            for request in requests:
                user = get_user(request[1])  # user_id
                text += f"<b>–ó–∞—è–≤–∫–∞ #{request[0]}</b>\n"
                text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']} (ID: {request[1]})\n"
                text += f"–ü—Ä–∏–∑: {request[2]}\n"
                text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {request[3]} –¥—É–±–ª–µ–π\n"
                text += f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request[4]} –¥—É–±–ª–µ–π\n"
                text += f"–î–∞—Ç–∞: {request[8]}\n\n"
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
        show_section(call, text, markup)
    elif data == "admin_panel":
        show_admin_panel(call)
    elif data == "back_to_menu":
        return_to_main_menu(call)
    else:
        show_admin_panel(call)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–±–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π ---
def admin_balance_step(message):
    if message.from_user.id != admin_id:
        return
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        uid = int(parts[0])
        amount = int(parts[1])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ uid/amount –≤ admin_balance_step: {message.text} ({e})")
        bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, admin_balance_step)
        return
    user = get_user(uid)
    if not user:
        bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if admin_action_state.get('action') == 'add_balance':
        user['balance'] += amount
        save_user(user)
        bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—É–±–ª–µ–π. –ë–∞–ª–∞–Ω—Å: {user['balance']}")
    elif admin_action_state.get('action') == 'sub_balance':
        user['balance'] = max(0, user['balance'] - amount)
        save_user(user)
        bot.send_message(admin_id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–±—Ä–∞–Ω–æ {amount} –¥—É–±–ª–µ–π. –ë–∞–ª–∞–Ω—Å: {user['balance']}")
    show_admin_panel(message)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def admin_delete_user_step(message):
    if message.from_user.id != admin_id:
        return
    try:
        uid = int(message.text.strip())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ uid –≤ admin_delete_user_step: {message.text} ({e})")
        bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)
        return
    user = get_user(uid)
    if not user:
        bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_confirm_delete_{uid}"),
               InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    bot.send_message(admin_id, f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} ({user['full_name']})?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_confirm_delete_'))
def admin_confirm_delete(call):
    if call.from_user.id != admin_id:
        return
    try:
        uid = int(call.data.split('_')[-1])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ uid –≤ admin_confirm_delete: {call.data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")
        return
    supabase.table("pending_tasks").delete().eq("user_id", uid).execute()
    supabase.table("users").delete().eq("user_id", uid).execute()
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
    show_admin_panel(call)

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
def admin_broadcast_step(message):
    if message.from_user.id != admin_id:
        return
    text = message.text.strip()
    admin_action_state['broadcast_text'] = text
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="admin_broadcast_send"),
               InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    bot.send_message(admin_id, f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_broadcast_send')
def admin_broadcast_send(call):
    if call.from_user.id != admin_id:
        return
    text = admin_action_state.get('broadcast_text')
    if not text:
        bot.send_message(admin_id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    res = supabase.table("users").select("user_id").execute()
    user_ids = [row['user_id'] for row in res.data]
    count = 0
    for uid in user_ids:
        try:
            bot.send_message(uid, text)
            count += 1
        except Exception:
            pass
    bot.send_message(admin_id, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    show_admin_panel(call)

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª ---
@bot.message_handler(commands=['ref_stats'])
def ref_stats(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.from_user.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT user_id, full_name, invited_by FROM users')
        rows = c.fetchall()
    text = '<b>–ö—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</b>\n'
    for row in rows:
        if row[2]:
            inviter = get_user_by_ref_code(row[2])
            inviter_name = inviter['full_name'] if inviter else row[2]
            text += f"{row[1]} (ID {row[0]}) ‚Üê {inviter_name}\n"
    bot.send_message(admin_id, text, parse_mode='HTML')

def back_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    return markup

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å pending_tasks ---
def add_pending_task(user_id, task_id, proof_type, proof_data):
    supabase.table("pending_tasks").insert({
        'user_id': user_id,
        'task_id': task_id,
        'proof_type': proof_type,
        'proof_data': proof_data,
        'status': 'pending'
    }).execute()

def get_pending_tasks():
    res = supabase.table("pending_tasks").select("id, user_id, task_id, proof_type, proof_data").eq("status", "pending").execute()
    if not res.data:
        return []
    return [(row['id'], row['user_id'], row['task_id'], row['proof_type'], row['proof_data']) for row in res.data]

def set_pending_task_status(task_id, status):
    supabase.table("pending_tasks").update({'status': status}).eq("id", task_id).execute()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø—Ä–∏–∑—ã ---
def add_prize_request(user_id, prize_name, prize_cost, user_balance, additional_info=""):
    res = supabase.table("prize_requests").insert({
        'user_id': user_id,
        'prize_name': prize_name,
        'prize_cost': prize_cost,
        'user_balance': user_balance,
        'additional_info': additional_info,
        'status': 'pending',
        'created_at': datetime.now().isoformat()
    }).execute()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –∑–∞—è–≤–∫–∏
    if res.data and 'id' in res.data[0]:
        return res.data[0]['id']
    return None

def get_pending_prize_requests():
    res = supabase.table("prize_requests").select("*").eq("status", "pending").order("created_at", desc=True).execute()
    return [tuple(row.values()) for row in res.data]

def set_prize_request_status(request_id, status, group_message_id=None):
    update_data = {'status': status}
    if group_message_id:
        update_data['group_message_id'] = group_message_id
    supabase.table("prize_requests").update(update_data).eq("id", request_id).execute()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
@bot.callback_query_handler(func=lambda call: (call.data.startswith('approve_') or call.data.startswith('reject_')) and not call.data.startswith('approve_prize_') and not call.data.startswith('reject_prize_') and not call.data.startswith('approve_marketplace_') and not call.data.startswith('reject_marketplace_'))
def handle_task_moderation(call):
    data = call.data
    try:
        action, user_id, task_id = data.split('_')
        user_id = int(user_id)
        task_id = int(task_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_id/task_id –≤ handle_task_moderation: {data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")
        return
    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Supabase
    res = supabase.table("pending_tasks").select("id").eq("user_id", user_id).eq("task_id", task_id).eq("status", "pending").execute()
    if not res.data:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return
    pending_id = res.data[0]['id']
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data="menu_tasks"))
    if action == 'approve':
        set_pending_task_status(pending_id, 'approved')
        user = get_user(user_id)
        global tasks
        tasks = get_fresh_tasks()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è
        reward = next((t['reward'] for t in tasks if t['id'] == task_id), 0)
        user['balance'] += reward
        user['weekly_earned'] = user.get('weekly_earned', 0) + reward
        user['tasks_done'].add(task_id)
        save_user(user)
        if hasattr(bot, 'user_data') and user_id in bot.user_data:
            bot.user_data[user_id].pop('task_id', None)
        if user.get('invited_by'):
            inviter = get_user_by_ref_code(user['invited_by'])
            if inviter:
                if 'ref_progress' not in inviter or not isinstance(inviter['ref_progress'], dict):
                    inviter['ref_progress'] = {}
                if 'ref_progress' not in user or not isinstance(user['ref_progress'], dict):
                    user['ref_progress'] = {}
                inviter['ref_progress'][user_id] = inviter['ref_progress'].get(user_id, 0) + 1
                user['ref_progress'][user_id] = inviter['ref_progress'][user_id]
                save_user(inviter)
                save_user(user)
                if inviter['ref_progress'][user_id] == 3:
                    awarded_key = f"awarded_{user_id}"
                    if awarded_key not in inviter['ref_progress']:
                        inviter['balance'] += 50
                        inviter['ref_progress'][awarded_key] = True
                        save_user(inviter)
                        bot.send_message(inviter['user_id'], f"üéâ –¢–≤–æ–π –¥—Ä—É–≥ {user['full_name']} –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è! +50 –¥—É–±–ª–µ–π.")
                        logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {inviter['user_id']} –ø–æ–ª—É—á–∏–ª 50 –¥—É–±–ª–µ–π –∑–∞ {user_id}")
        bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +{reward} {plural_dubl(reward)}.", reply_markup=markup)
        bot.send_message(user_id, "–ú–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è!")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    else:
        admin_action_state['reject_task'] = {
            'pending_id': pending_id,
            'user_id': user_id,
            'task_id': task_id,
            'call_message_id': call.message.message_id
        }
        bot.send_message(admin_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:", reply_markup=telebot.types.ForceReply(selective=False))
        bot.answer_callback_query(call.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–∏–∑—ã ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_prize_') or call.data.startswith('reject_prize_'))
def handle_prize_moderation(call):
    data = call.data
    try:
        if data.startswith('approve_prize_'):
            action = 'approve_prize'
            request_id = int(data.split('_')[-1])
        elif data.startswith('reject_prize_'):
            action = 'reject_prize'
            request_id = int(data.split('_')[-1])
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ request_id –≤ handle_prize_moderation: {data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–æ id —á–µ—Ä–µ–∑ Supabase
    res = supabase.table("prize_requests").select("*").eq("id", request_id).eq("status", "pending").execute()
    if not res.data:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return
    request = res.data[0]
    user_id = request['user_id']
    prize_name = request['prize_name']
    prize_cost = request['prize_cost']
    if action == 'approve_prize':
        set_prize_request_status(request_id, 'approved')
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
        bot.send_message(user_id, f"üéâ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n\n–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.", parse_mode='HTML')
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    else:
        admin_action_state['reject_prize'] = {
            'request_id': request_id,
            'user_id': user_id,
            'prize_name': prize_name,
            'prize_cost': prize_cost,
            'call_message_id': call.message.message_id
        }
        bot.send_message(admin_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∑:", reply_markup=telebot.types.ForceReply(selective=False))
        bot.answer_callback_query(call.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

# --- –ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π ---
@bot.message_handler(func=lambda m: m.text == "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
def admin_pending_tasks(message):
    if message.from_user.id != admin_id:
        return
    pending_tasks = get_pending_tasks()
    if not pending_tasks:
        bot.send_message(admin_id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return
    global tasks
    tasks = get_fresh_tasks()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è
    for row in pending_tasks:
        pid, user_id, task_id, proof_type, proof_data = row
        try:
            user_id = int(user_id)
            task_id = int(task_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_id/task_id –≤ admin_pending_tasks: {user_id}, {task_id} ({e})")
            return
        user = get_user(user_id)
        task_name = next((t['name'] for t in tasks if t['id']==task_id),'')
        username = user.get('username')
        if username:
            username_str = f" (@{username})"
        else:
            username_str = ""
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_name}</b>"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
                   InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}"))
        if proof_type == 'photo':
            bot.send_photo(admin_id, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
        elif proof_type == 'document':
            bot.send_document(admin_id, proof_data, caption=text, parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(admin_id, text + f"\n\n–ü—Ä—É—Ñ: {proof_data}", parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'done')
def already_done_callback(call):
    bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_support')
def cancel_support_callback(call):
    user_id = call.from_user.id
    support_states.discard(user_id)
    bot.clear_step_handler_by_chat_id(user_id)
    bot.edit_message_text("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
    return_to_main_menu(call, user_id)





@bot.message_handler(func=lambda m: m.reply_to_message and 'reject_prize' in admin_action_state)
def handle_prize_reject_reason(message):
    if message.from_user.id != admin_id:
        return
    if 'reject_prize' not in admin_action_state:
        return
    reason = (message.text or '').strip()
    prize_data = admin_action_state.pop('reject_prize')
    request_id = prize_data['request_id']
    user_id = prize_data['user_id']
    prize_name = prize_data['prize_name']
    prize_cost = prize_data['prize_cost']
    call_message_id = prize_data['call_message_id']
    set_prize_request_status(request_id, 'rejected')
    user = get_user(user_id)
    user['balance'] += prize_cost
    save_user(user)
    if reason:
        rejection_text = f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–î—É–±–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
    else:
        rejection_text = f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n\n–î—É–±–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", callback_data="menu_prizes"))
    bot.send_message(user_id, rejection_text, parse_mode='HTML', reply_markup=markup)
    try:
        bot.edit_message_reply_markup(GROUP_ID, call_message_id, reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
    bot.send_message(admin_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason if reason else '–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'}")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ ---
@bot.message_handler(func=lambda m: m.text == 'üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏')
def admin_tasks_panel(message):
    if message.from_user.id != admin_id:
        return
    show_tasks_admin_panel(message)

def show_tasks_admin_panel(message_or_call):
    global tasks
    tasks = get_fresh_tasks()
    markup = telebot.types.InlineKeyboardMarkup()
    for t in tasks:
        try:
            name = str(t.get('name') or '')
            category = str(t.get('category') or '')
            markup.add(
                telebot.types.InlineKeyboardButton(
                    f"{name} ({'–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if category=='daily' else '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'})",
                    callback_data=f"edit_task_{t['id']}"
                ),
                telebot.types.InlineKeyboardButton("‚ùå", callback_data=f"delete_task_{t['id']}")
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ {t}: {e}")
    markup.add(telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task"))
    thread_id = getattr(getattr(message_or_call, 'message', message_or_call), 'message_thread_id', None)
    chat_id = getattr(getattr(message_or_call, 'message', message_or_call), 'chat', None)
    if hasattr(message_or_call, 'message'):
        # –£–±–∏—Ä–∞–µ–º message_thread_id –∏–∑ edit_message_text
        bot.edit_message_text("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>", message_or_call.message.chat.id, message_or_call.message.message_id, reply_markup=markup, parse_mode='HTML')
    else:
        if thread_id:
            bot.send_message(chat_id.id, "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>", reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)
        else:
            bot.send_message(message_or_call.from_user.id, "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>", reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: re.match(r'^edit_task_\\d+$', call.data))
def edit_task_start(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    text = f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['name']}\n–ù–∞–≥—Ä–∞–¥–∞: {task['reward']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {'–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if task['category']=='daily' else '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'}"
    if task.get('desc'):
        text += f"\n\n<em>–û–ø–∏—Å–∞–Ω–∏–µ:</em> {task['desc']}"
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_task_name_{task_id}"),
        telebot.types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"edit_task_reward_{task_id}"),
        telebot.types.InlineKeyboardButton("üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_task_cat_{task_id}"),
        telebot.types.InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_task_desc_{task_id}")
    )
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks_admin_panel"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'tasks_admin_panel')
def back_to_tasks_admin_panel(call):
    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–∫–∞ –∏ –∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if call.message.chat.type == 'private' and call.from_user.id == admin_id:
        show_tasks_admin_panel(call)
    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏ –Ω—É–∂–Ω–∞—è —Ç–µ–º–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é –ø–∞–Ω–µ–ª—å
    elif call.message.chat.id == GROUP_ID and getattr(call.message, 'message_thread_id', None) == TASKS_PANEL_THREAD_ID:
        show_tasks_filter_panel(call.message)
    else:
        bot.answer_callback_query(call.id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ç–∞ –ª–æ–∫–∞—Ü–∏—è.')

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_task_name_'))
def edit_task_name(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler_by_chat_id(admin_id, lambda m: save_task_name(m, task_id, call.message.message_id))

def save_task_name(message, task_id, msg_id):
    for t in tasks:
        if t['id'] == task_id:
            t['name'] = md_links_to_html(message.text)
            break
    save_tasks(tasks)
    bot.send_message(admin_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    show_tasks_admin_panel(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_task_reward_'))
def edit_task_reward(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler_by_chat_id(admin_id, lambda m: save_task_reward(m, task_id, call.message.message_id))

def save_task_reward(message, task_id, msg_id):
    try:
        reward = int(message.text.strip())
    except Exception:
        bot.send_message(admin_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, lambda m: save_task_reward(m, task_id, msg_id))
        return
    for t in tasks:
        if t['id'] == task_id:
            t['reward'] = reward
            break
    save_tasks(tasks)
    bot.send_message(admin_id, "–ù–∞–≥—Ä–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    show_tasks_admin_panel(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_task_cat_'))
def edit_task_cat(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data=f"set_task_cat_daily_{task_id}"),
        telebot.types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data=f"set_task_cat_weekly_{task_id}")
    )
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_task_cat_'))
def set_task_cat(call):
    if call.from_user.id != admin_id:
        return
    cat, task_id = call.data.split('_')[-2:]
    if cat not in ("daily", "weekly"):
        cat = "daily"
    for t in tasks:
        if t['id'] == int(task_id):
            t['category'] = cat
            break
    save_tasks(tasks)
    bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    show_tasks_admin_panel(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_task_'))
def delete_task(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    global tasks
    tasks = [t for t in tasks if t['id'] != task_id]
    save_tasks(tasks)
    bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    show_tasks_admin_panel(call)

@bot.callback_query_handler(func=lambda call: call.data == 'add_task')
def add_task_start(call):
    if call.from_user.id != admin_id:
        return
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler_by_chat_id(admin_id, add_task_name)

def add_task_name(message):
    name = md_links_to_html(message.text)
    admin_action_state['new_task_name'] = name
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ –Ω–∞–≥—Ä–∞–¥—É (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler_by_chat_id(admin_id, lambda m: add_task_reward(m, name))

def add_task_reward(message, name):
    try:
        reward = int(message.text.strip())
    except Exception:
        bot.send_message(admin_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, lambda m: add_task_reward(m, name))
        return
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data=f"add_task_cat_daily_{reward}"),
        telebot.types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data=f"add_task_cat_weekly_{reward}")
    )
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_task_cat_'))
def add_task_cat(call):
    if call.from_user.id != admin_id:
        return
    parts = call.data.split('_')
    cat = parts[-2]
    reward = int(parts[-1])
    name = admin_action_state.get('new_task_name', '')
    new_id = max([t['id'] for t in tasks], default=0) + 1
    if cat not in ("daily", "weekly"):
        cat = "daily"
    admin_action_state['new_task'] = {'id': new_id, 'name': name, 'reward': reward, 'category': cat}
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º):")
    bot.register_next_step_handler_by_chat_id(admin_id, save_new_task_with_desc)

def save_new_task_with_desc(message):
    global tasks
    desc = md_links_to_html(message.text)
    task = admin_action_state.pop('new_task', None)
    if not task:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return
    task['desc'] = desc
    tasks.append(task)
    save_tasks(tasks)
    tasks = get_fresh_tasks()
    bot.send_message(admin_id, "–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.")
    show_tasks_admin_panel(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_task_desc_'))
def edit_task_desc(call):
    if call.from_user.id != admin_id:
        return
    task_id = int(call.data.split('_')[-1])
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º force_reply –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    msg = bot.send_message(admin_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è '{task['name']}' (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º):", reply_markup=telebot.types.ForceReply(selective=False))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ admin_action_state
    admin_action_state['edit_desc_task_id'] = task_id
    admin_action_state['edit_desc_msg_id'] = msg.message_id

@bot.message_handler(func=lambda m: m.reply_to_message and m.reply_to_message.message_id == admin_action_state.get('edit_desc_msg_id'))
def save_task_desc_force_reply(message):
    task_id = admin_action_state.pop('edit_desc_task_id', None)
    admin_action_state.pop('edit_desc_msg_id', None)
    if task_id is None:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    for t in tasks:
        if t['id'] == task_id:
            t['desc'] = md_links_to_html(message.text)
            break
    save_tasks(tasks)
    bot.send_message(admin_id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    show_tasks_admin_panel(message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ---
@bot.message_handler(func=lambda m: m.reply_to_message and 'reject_task' in admin_action_state)
def handle_task_reject_reason(message):
    reject_data = admin_action_state.pop('reject_task', None)
    if not reject_data:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        return
    
    pending_id = reject_data['pending_id']
    user_id = reject_data['user_id']
    task_id = reject_data['task_id']
    call_message_id = reject_data['call_message_id']
    reason = message.text.strip()
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    set_pending_task_status(pending_id, 'rejected')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–∏—á–∏–Ω–æ–π
    global tasks
    tasks = get_fresh_tasks()
    task_name = next((t['name'] for t in tasks if t['id'] == task_id), '')
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data="menu_tasks"))
    
    rejection_text = f"‚ùå –ó–∞–¥–∞–Ω–∏–µ <b>{task_name}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
    bot.send_message(user_id, rejection_text, parse_mode='HTML', reply_markup=markup)
    
    # –°–Ω–∏–º–∞–µ–º –∑–∞—â–∏—Ç—É: —É–¥–∞–ª—è–µ–º task_id –∏–∑ user_data
    if hasattr(bot, 'user_data') and user_id in bot.user_data:
        bot.user_data[user_id].pop('task_id', None)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    try:
        bot.edit_message_reply_markup(GROUP_ID, call_message_id, reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
    
    bot.send_message(admin_id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.message_handler(func=lambda m: m.reply_to_message and 'reject_prize' in admin_action_state)
def handle_prize_reject_reason(message):
    if message.from_user.id != admin_id:
        return
    
    if 'reject_prize' not in admin_action_state:
        return
    
    reason = message.text.strip()
    if not reason:
        bot.send_message(admin_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler_by_chat_id(admin_id, handle_prize_reject_reason)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    prize_data = admin_action_state.pop('reject_prize')
    request_id = prize_data['request_id']
    user_id = prize_data['user_id']
    prize_name = prize_data['prize_name']
    prize_cost = prize_data['prize_cost']
    call_message_id = prize_data['call_message_id']
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–∑
    set_prize_request_status(request_id, 'rejected')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = get_user(user_id)
    user['balance'] += prize_cost
    save_user(user)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    rejection_text = f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–î—É–±–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÅ –û–±–º–µ–Ω—è—Ç—å –¥—É–±–ª–∏ –Ω–∞ –ø—Ä–∏–∑—ã", callback_data="menu_prizes"))
    bot.send_message(user_id, rejection_text, parse_mode='HTML', reply_markup=markup)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    try:
        bot.edit_message_reply_markup(GROUP_ID, call_message_id, reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
    
    bot.send_message(admin_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_delete_user')
def admin_delete_user_start(call):
    if call.from_user.id != admin_id:
        return
    bot.send_message(admin_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)

def admin_delete_user_step(message):
    if message.from_user.id != admin_id:
        return
    try:
        uid = int(message.text.strip())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ uid –≤ admin_delete_user_step: {message.text} ({e})")
        bot.send_message(admin_id, "–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler_by_chat_id(admin_id, admin_delete_user_step)
        return
    user = get_user(uid)
    if not user:
        bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_confirm_delete_{uid}"),
               InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    bot.send_message(admin_id, f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} ({user['full_name']})?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_confirm_delete_'))
def admin_confirm_delete(call):
    if call.from_user.id != admin_id:
        return
    try:
        uid = int(call.data.split('_')[-1])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ uid –≤ admin_confirm_delete: {call.data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É!")
        return
    supabase.table("pending_tasks").delete().eq("user_id", uid).execute()
    supabase.table("users").delete().eq("user_id", uid).execute()
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
    show_admin_panel(call)



# --- –ú–µ—Ö–∞–Ω–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ ---
@bot.message_handler(func=lambda m: m.text == "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥")
def daily_entry(message):
    user_id = message.from_user.id
    user = get_user(user_id, message.from_user.username)
    today = datetime.now().date()
    last = None
    try:
        last = datetime.strptime(user.get('last_daily',''), '%Y-%m-%d').date() if user.get('last_daily') else None
    except Exception:
        last = None
    streak = user.get('daily_streak', 0)
    if last == today:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ streak –Ω–µ 0, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –≤—Ö–æ–¥
        if not streak:
            streak = 1
        bot.send_message(user_id, f"–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –¥—É–±–ª–∏! –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {streak}/7.")
        return
    if last and (today - last).days == 1:
        streak = streak + 1 if streak < 7 else 1
    else:
        streak = 1
    user['balance'] += streak
    user['weekly_earned'] = user.get('weekly_earned', 0) + streak
    user['last_daily'] = today.strftime('%Y-%m-%d')
    user['daily_streak'] = streak
    save_user(user)
    bot.send_message(user_id, f"üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥! +{streak} {plural_dubl(streak)}\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {streak}/7. –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –¥–µ–Ω—å ‚Äî –Ω–∞—á–Ω—ë—à—å —Å–Ω–∞—á–∞–ª–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "get_daily_bonus")
def get_daily_bonus_callback(call):
    user_id = call.from_user.id
    class FakeMessage:
        def __init__(self, from_user):
            self.from_user = from_user
            self.text = "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥"
    fake_message = FakeMessage(call.from_user)
    daily_entry(fake_message)
    bot.answer_callback_query(call.id)

def plural_dubl(n):
    if n % 10 == 1 and n % 100 != 11:
        return "–¥—É–±–ª—å"
    elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        return "–¥—É–±–ª—è"
    else:
        return "–¥—É–±–ª–µ–π"

def get_current_task_name(user_id):
    if hasattr(bot, 'user_data') and user_id in bot.user_data and bot.user_data[user_id].get('task_id'):
        task_id = bot.user_data[user_id]['task_id']
        t = next((t for t in tasks if t['id'] == task_id), None)
        if t:
            return t['name']
    return None

# --- –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É ---
@bot.message_handler(func=lambda m: m.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏")
def weekly_rating(message):
    user_id = message.from_user.id
    # –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ –±–∞–ª–∞–Ω—Å—É
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('SELECT user_id, full_name, balance FROM users ORDER BY balance DESC, user_id ASC LIMIT 100')
        rows = c.fetchall()
    top = rows[:10]
    text = '<b>üèÜ –¢–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n'
    for i, row in enumerate(top, 1):
        text += f"{i}. {row[1]} ‚Äî {row[2]} {plural_dubl(row[2])}\n"
    # –ú–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    place = next((i+1 for i, row in enumerate(rows) if row[0]==user_id), None)
    my_balance = next((row[2] for row in rows if row[0]==user_id), 0)
    if place:
        text += f"\n<b>–¢–≤–æ—ë –º–µ—Å—Ç–æ:</b> {place} –∏–∑ {len(rows)} (—É —Ç–µ–±—è {my_balance} {plural_dubl(my_balance)})"
    else:
        text += "\n–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."
    bot.send_message(user_id, text, parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ---
@bot.message_handler(func=lambda m: m.chat.id == GROUP_ID and m.reply_to_message)
def handle_support_reply(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
    if not message.reply_to_message:
        return
    
    # –ò—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    target_message_id = message.reply_to_message.message_id
    support_request = None
    
    for msg in support_messages:
        if msg.get('group_message_id') == target_message_id:
            support_request = msg
            break
    
    if support_request:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = support_request['user_id']
        try:
            bot.send_message(user_id, f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{message.text}", parse_mode='HTML')
            # –û—Ç–º–µ—á–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            bot.reply_to(message, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É –ø—Ä–∏–∑–∞
    # –ò—â–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    prize_id_match = re.search(r'–ó–∞—è–≤–∫–∞ ID: (\d+)', message.reply_to_message.text)
    if prize_id_match:
        prize_id = int(prize_id_match.group(1))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        with sqlite3.connect('users.db') as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM prize_requests WHERE id=?', (prize_id,))
            request = c.fetchone()
        
        if request:
            user_id = request[1]  # user_id
            prize_name = request[2]  # prize_name
            prize_cost = request[3]  # prize_cost
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            reply_text = f"<b>üéÅ –û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –ø—Ä–∏–∑:</b>\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n\n{message.text}"
            
            try:
                bot.send_message(user_id, reply_text, parse_mode='HTML')
                bot.reply_to(message, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø—Ä–∏–∑—É: {e}")
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ ---
def send_daily_reminder():
    res = supabase.table('users').select('user_id').execute()
    user_ids = [row['user_id'] for row in res.data]
    for user_id in user_ids:
        try:
            user = get_user(user_id)
            streak = user.get('daily_streak', 0)
            today = datetime.now().date()
            last = None
            try:
                last = datetime.strptime(user.get('last_daily',''), '%Y-%m-%d').date() if user.get('last_daily') else None
            except Exception:
                last = None
            if last == today:
                text = f"üî• –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –¥—É–±–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–æ–≥—Ä–µ—Å—Å: {streak}/7."
                markup = None
            else:
                text = f"üî• –ù–µ –∑–∞–±—É–¥—å –ø–æ–ª—É—á–∏—Ç—å –¥—É–±–ª–∏ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {streak}/7."
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥—É–±–ª–∏", callback_data="get_daily_bonus"))
            bot.send_message(user_id, text, reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–∫–∏ {user_id}: {e}")

# --- –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ APScheduler ---
scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_reminder, 'cron', hour=9, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ —Å–µ—Ä–≤–µ—Ä—É
scheduler.start()

@bot.callback_query_handler(func=lambda call: call.data.startswith('request_prize_'))
def request_prize_callback(call):
    user_id = call.from_user.id
    user = get_user(user_id, call.from_user.username)
    try:
        parts = call.data.split('_')
        prize_cost = int(parts[-1])
        prize_id = int(parts[2])
        # –ò—â–µ–º –ø—Ä–∏–∑ –ø–æ ID
        prize = next((p for p in prizes if p['id'] == prize_id and p['cost'] == prize_cost), None)
        if not prize:
            logger.error(f"–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: ID {prize_id}, —Å—Ç–æ–∏–º–æ—Å—Ç—å {prize_cost}")
            bot.answer_callback_query(call.id, "–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        prize_name = prize['name']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞: {call.data} ({e})")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞")
        return
    if user['balance'] < prize_cost:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—É–±–ª–µ–π!")
        return
    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–∑
    request_id = add_prize_request(user_id, prize_name, prize_cost, user['balance'])
    username = user.get('username')
    username_str = f" (@{username})" if username else ""
    text = f"<b>üéÅ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user['full_name']}</a>{username_str}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} –¥—É–±–ª–µ–π\n\n–ü—Ä–∏–∑: <b>{prize_name}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {prize_cost} –¥—É–±–ª–µ–π\n\n–ó–∞—è–≤–∫–∞ ID: {request_id}"
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_prize_{request_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_prize_{request_id}")
    )
    try:
        msg = bot.send_message(GROUP_ID, text, parse_mode='HTML', message_thread_id=TOPIC_ID, reply_markup=markup)
        set_prize_request_status(request_id, 'pending', msg.message_id)
        user['balance'] -= prize_cost
        save_user(user)
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        bot.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–∑ <b>{prize_name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–°–ø–∏—Å–∞–Ω–æ: {prize_cost} –¥—É–±–ª–µ–π\n–û—Å—Ç–∞—Ç–æ–∫: {user['balance']} –¥—É–±–ª–µ–π\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", call.message.chat.id, call.message.message_id, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–∑: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")

def md_links_to_html(text):
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text or '')

def remind_daily_bonus(user_id):
    user = get_user(user_id)
    today = datetime.now().date()
    last = None
    try:
        last = datetime.strptime(user.get('last_daily',''), '%Y-%m-%d').date() if user.get('last_daily') else None
    except Exception:
        last = None
    if last != today:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥—É–±–ª–∏", callback_data="get_daily_bonus"))
        bot.send_message(user_id, "üî• –ù–µ –∑–∞–±—É–¥—å –ø–æ–ª—É—á–∏—Ç—å –¥—É–±–ª–∏ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=markup)

def start_gsheets_exporter():
    def run_export():
        while True:
            try:
                export_to_gsheets_main()
            except Exception as e:
                print(f"[GSHEETS EXPORT ERROR] {e}")
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç
    t = threading.Thread(target=run_export, daemon=True)
    t.start()

# –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
start_gsheets_exporter()

@bot.message_handler(commands=['tasks'])
def cmd_tasks(message):
    show_tasks_filter_panel(message)

def show_tasks_filter_panel(message, notice=None):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("üïì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="filter_daily"),
        telebot.types.InlineKeyboardButton("üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", callback_data="filter_weekly")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_by_date"),
        telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="filter_search")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="public_add_task")
    )
    text = "<b>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
    if notice:
        text = f"<b>{notice}</b>\n\n" + text
    bot.send_message(
        message.chat.id, text, reply_markup=markup, message_thread_id=getattr(message, 'message_thread_id', None), parse_mode='HTML'
    )

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('filter_'))
def filter_tasks_handler(call):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    filter_type = call.data.replace('filter_', '')
    if filter_type == 'daily':
        filtered = [t for t in tasks if t.get('category') == 'daily']
        show_tasks_page(call, filtered, 0, 'daily')
    elif filter_type == 'weekly':
        filtered = [t for t in tasks if t.get('category') == 'weekly']
        show_tasks_page(call, filtered, 0, 'weekly')
    elif filter_type == 'by_date':
        # –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
        dates = sorted(set(t.get('date') for t in tasks if t.get('date')))
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        for d in dates:
            markup.add(telebot.types.InlineKeyboardButton(d, callback_data=f"filter_date_{d}"))
        markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="public_back_to_filter"))
        bot.edit_message_text(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>", call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML', message_thread_id=call.message.message_thread_id
        )
    elif filter_type == 'search':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", message_thread_id=call.message.message_thread_id)
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, search_tasks_by_name, call.message.chat.id, call.message.message_thread_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('filter_date_'))
def filter_by_date_handler(call):
    date = call.data.replace('filter_date_', '')
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    filtered = [t for t in tasks if t.get('date') == date]
    show_tasks_page(call, filtered, 0, f'date_{date}')

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
TASKS_PER_PAGE = 5

def show_tasks_page(call, tasks, page, filter_key):
    total = len(tasks)
    start = page * TASKS_PER_PAGE
    end = start + TASKS_PER_PAGE
    page_tasks = tasks[start:end]
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    for t in page_tasks:
        btn_text = f"{t['name']} | {('üóì ' + t.get('date', '-')) if t.get('date') else ''} | {('üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if t['category']=='daily' else 'üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ') if t.get('category') else ''}"
        markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"public_task_{t['id']}"))
    nav = []
    if start > 0:
        nav.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{filter_key}_{page-1}"))
    if end < total:
        nav.append(telebot.types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{filter_key}_{page+1}"))
    if nav:
        markup.add(*nav)
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="public_back_to_filter"))
    text = f"<b>–ó–∞–¥–∞–Ω–∏—è ({start+1}-{min(end,total)} –∏–∑ {total})</b>"
    bot.edit_message_text(
        text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML', message_thread_id=call.message.message_thread_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
def paginate_tasks_handler(call):
    parts = call.data.split('_')
    filter_key = '_'.join(parts[1:-1])
    page = int(parts[-1])
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    if filter_key == 'daily':
        filtered = [t for t in tasks if t.get('category') == 'daily']
    elif filter_key == 'weekly':
        filtered = [t for t in tasks if t.get('category') == 'weekly']
    elif filter_key.startswith('date'):
        date = filter_key.split('_', 1)[1]
        filtered = [t for t in tasks if t.get('date') == date]
    else:
        filtered = tasks
    show_tasks_page(call, filtered, page, filter_key)

@bot.callback_query_handler(func=lambda call: call.data == 'public_back_to_filter')
def back_to_filter_panel(call):
    bot.edit_message_text(
        "<b>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
        call.message.chat.id, call.message.message_id,
        reply_markup=telebot.types.InlineKeyboardMarkup().add(
            telebot.types.InlineKeyboardButton("üïì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="filter_daily"),
            telebot.types.InlineKeyboardButton("üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", callback_data="filter_weekly"),
            telebot.types.InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_by_date"),
            telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="filter_search"),
            telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="public_add_task")
        ),
        parse_mode='HTML',
        message_thread_id=call.message.message_thread_id
    )

# --- –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
def search_tasks_by_name(message, chat_id, thread_id, msg_id):
    query = message.text.strip().lower()
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    filtered = [t for t in tasks if query in t['name'].lower()]
    if not filtered:
        bot.send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message_thread_id=thread_id)
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
    fake_call = type('FakeCall', (), {
        'message': type('FakeMsg', (), {'chat': type('FakeChat', (), {'id': chat_id})(), 'message_id': msg_id, 'message_thread_id': thread_id})(),
        'data': ''
    })()
    show_tasks_page(fake_call, filtered, 0, f'search_{query}')

@bot.callback_query_handler(func=lambda call: call.data.startswith('public_task_'))
def public_task_menu(call):
    task_id = int(call.data.split('_')[-1])
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    status = "üü¢ –û—Ç–∫—Ä—ã—Ç–æ" if task.get('date', '') <= datetime.now().strftime('%Y-%m-%d') else f"üî¥ –û—Ç–∫—Ä–æ–µ—Ç—Å—è {task.get('date', '-')}"
    text = (
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task['name']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['desc']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {'üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if task['category']=='daily' else 'üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'}\n"
        f"<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward']}\n"
        f"<b>–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {task.get('date', '-')}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_task_name_{task_id}"),
        telebot.types.InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_task_desc_{task_id}"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üí∞ –ù–∞–≥—Ä–∞–¥–∞", callback_data=f"edit_task_reward_{task_id}"),
        telebot.types.InlineKeyboardButton("üóì –î–∞—Ç–∞", callback_data=f"edit_task_date_{task_id}"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit_task_cat_{task_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"public_delete_task_{task_id}"),
    )
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="public_back_to_list"))
    bot.edit_message_text(
        text, call.message.chat.id, call.message.message_id, reply_markup=markup, message_thread_id=call.message.message_thread_id, parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'public_back_to_list')
def public_back_to_list(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_tasks_public_panel(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'public_add_task')
def public_add_task_start(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=call.message.message_thread_id)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, public_add_task_name, call.message.chat.id, call.message.message_thread_id)

def public_add_task_name(message, chat_id, thread_id):
    task = {'name': message.text.strip()}
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, public_add_task_desc, chat_id, thread_id, task)

def public_add_task_desc(message, chat_id, thread_id, task):
    task['desc'] = message.text.strip()
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–≥—Ä–∞–¥—É</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—á–∏—Å–ª–æ):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, public_add_task_reward, chat_id, thread_id, task)

def public_add_task_reward(message, chat_id, thread_id, task):
    try:
        task['reward'] = int(message.text.strip())
    except Exception:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, public_add_task_reward, chat_id, thread_id, task)
        return
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data="public_add_task_cat_daily"),
        telebot.types.InlineKeyboardButton("üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data="public_add_task_cat_weekly")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> –∑–∞–¥–∞–Ω–∏—è:", reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task –≤ user_data –ø–æ chat_id
    if not hasattr(bot, 'user_data'): bot.user_data = {}
    bot.user_data[chat_id] = {'add_task': task, 'thread_id': thread_id}

@bot.callback_query_handler(func=lambda call: call.data.startswith('public_add_task_cat_'))
def public_add_task_cat(call):
    cat = call.data.split('_')[-1]
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    task = bot.user_data.get(chat_id, {}).get('add_task', {})
    task['category'] = 'daily' if cat == 'daily' else 'weekly'
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è</b> –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, public_add_task_date, chat_id, thread_id, task)

def public_add_task_date(message, chat_id, thread_id, task):
    date_str = message.text.strip().lower()
    if date_str == '—Å–µ–≥–æ–¥–Ω—è':
        date_str = datetime.now().strftime('%Y-%m-%d')
    try:
        y, m, d = map(int, date_str.split('-'))
        _ = calendar.timegm((y, m, d, 0, 0, 0))
        task['date'] = f"{y:04d}-{m:02d}-{d:02d}"
    except Exception:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, public_add_task_date, chat_id, thread_id, task)
        return
    # id –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    task['id'] = get_next_task_id()
    try:
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
    except Exception:
        tasks = []
    tasks.append(task)
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_tasks_public_panel(message, notice=f"–ó–∞–¥–∞–Ω–∏–µ '{task['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('public_delete_task_'))
def public_delete_task(call):
    task_id = int(call.data.split('_')[-1])
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    tasks = [t for t in tasks if t['id'] != task_id]
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_tasks_public_panel(call.message, notice="–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å public_edit_task (–ø–æ —à–∞–≥–∞–º, –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)

def get_next_task_id():
    try:
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        return max([t['id'] for t in tasks]) + 1 if tasks else 1
    except Exception:
        return 1

def post_or_replace_tasks_panel(chat_id, thread_id, notice=None):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        with open("tasks_panel_msg_id.txt") as f:
            old_msg_id = int(f.read())
        bot.delete_message(chat_id, old_msg_id)
    except Exception:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
    class FakeMessage:
        def __init__(self, chat_id, thread_id):
            self.chat = type('FakeChat', (), {'id': chat_id})()
            self.message_thread_id = thread_id
    fake_msg = FakeMessage(chat_id, thread_id)
    show_tasks_filter_panel(fake_msg, notice)
    # show_tasks_filter_panel —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id
    # –ü–æ—ç—Ç–æ–º—É –Ω–∏–∂–µ –ª–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id
    # (–∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞–π show_tasks_filter_panel, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # ---
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å show_tasks_filter_panel, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å message_id

# –ò—Å–ø–æ–ª—å–∑—É–π post_or_replace_tasks_panel –≤–º–µ—Å—Ç–æ show_tasks_public_panel –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:
# post_or_replace_tasks_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# --- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ –≤ —Ç–µ–º–µ ---
def auto_post_tasks_panel():
    try:
        show_tasks_moder_panel(TASKS_PANEL_CHAT_ID, TASKS_PANEL_THREAD_ID)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞–Ω–∏–π: {e}")

# –í—ã–∑–æ–≤–µ–º –∞–≤—Ç–æ–ø–∞–Ω–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
import threading
threading.Timer(2, auto_post_tasks_panel).start()

# --- –§–ª–∞–≥ visible –¥–ª—è –∑–∞–¥–∞–Ω–∏–π ---
# –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: task['visible'] = True
# –ü—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏: task['visible'] = False
# –ü—Ä–∏ –ø–æ–∫–∞–∑–µ: task['visible'] = True

# --- –ü—É–±–ª–∏—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ 142) ---
def show_tasks_moder_panel(chat_id, thread_id, notice=None):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    tasks = sorted(tasks, key=lambda t: (t.get('date', ''), t['name']))
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    for task in tasks:
        if not task.get('visible', True):
            btn_text = f"‚ùå {task['name']} (—Å–∫—Ä—ã—Ç–æ)"
        else:
            btn_text = f"{task['name']}"
        markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"mod_task_{task['id']}"))
    markup.add(telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="mod_add_task"))
    text = "<b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: –∑–∞–¥–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ."
    if notice:
        text = f"<b>{notice}</b>\n\n" + text
    msg = bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å msg.message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –ø–∞–Ω–µ–ª–∏

# --- –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
def show_task_moder_card(chat_id, thread_id, task_id):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        show_tasks_moder_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    text = f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task['name']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['desc']}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {'üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if task['category']=='daily' else 'üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'}\n<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward']}\n<b>–î–∞—Ç–∞:</b> {task.get('date', '-')}\n<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ü–æ–∫–∞–∑–∞–Ω–æ' if task.get('visible', True) else '‚ùå –°–∫—Ä—ã—Ç–æ'}"
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"mod_edit_{task_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"mod_delete_{task_id}"),
        telebot.types.InlineKeyboardButton("üëÅ –°–∫—Ä—ã—Ç—å" if task.get('visible', True) else "üëÅ‚Äçüó® –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"mod_toggle_{task_id}")
    )
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mod_back"))
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ 142) ---
@bot.callback_query_handler(func=lambda call: call.message.chat.id == GROUP_ID and getattr(call.message, 'message_thread_id', None) == TASKS_PANEL_THREAD_ID and call.from_user.id in MODERATOR_IDS and call.data.startswith('mod_'))
def moder_tasks_callback(call):
    data = call.data
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    if data == 'mod_add_task':
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_name, chat_id, thread_id, {})
        return
    if data == 'mod_back':
        show_tasks_moder_panel(chat_id, thread_id)
        return
    if data.startswith('mod_task_'):
        task_id = int(data.split('_')[-1])
        show_task_moder_card(chat_id, thread_id, task_id)
        return
    if data.startswith('mod_delete_'):
        task_id = int(data.split('_')[-1])
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"mod_confirmdel_{task_id}"))
        markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mod_task_{task_id}"))
        bot.send_message(chat_id, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=markup, message_thread_id=thread_id)
        return
    if data.startswith('mod_confirmdel_'):
        task_id = int(data.split('_')[-1])
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        tasks = [t for t in tasks if t['id'] != task_id]
        with open('tasks.json', 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
        show_tasks_moder_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        return
    if data.startswith('mod_toggle_'):
        task_id = int(data.split('_')[-1])
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        for t in tasks:
            if t['id'] == task_id:
                t['visible'] = not t.get('visible', True)
        with open('tasks.json', 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
        show_task_moder_card(chat_id, thread_id, task_id)
        return
    if data.startswith('mod_edit_'):
        task_id = int(data.split('_')[-1])
        show_task_moder_edit(chat_id, thread_id, task_id)
        return

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ—à–∞–≥–æ–≤–æ) ---
def moder_add_task_name(message, chat_id, thread_id, task):
    task['name'] = message.text.strip()
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_desc, chat_id, thread_id, task)

def moder_add_task_desc(message, chat_id, thread_id, task):
    task['desc'] = message.text.strip()
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–≥—Ä–∞–¥—É</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—á–∏—Å–ª–æ):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_reward, chat_id, thread_id, task)

def moder_add_task_reward(message, chat_id, thread_id, task):
    try:
        task['reward'] = int(message.text.strip())
    except Exception:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_reward, chat_id, thread_id, task)
        return
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data="mod_cat_daily"),
        telebot.types.InlineKeyboardButton("üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data="mod_cat_weekly")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> –∑–∞–¥–∞–Ω–∏—è:", reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)
    bot.user_data[chat_id] = {'add_task': task, 'thread_id': thread_id}

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_cat_'))
def moder_add_task_cat(call):
    cat = call.data.split('_')[-1]
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    task = bot.user_data.get(chat_id, {}).get('add_task', {})
    task['category'] = 'daily' if cat == 'daily' else 'weekly'
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è</b> –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_date, chat_id, thread_id, task)

def moder_add_task_date(message, chat_id, thread_id, task):
    date_str = message.text.strip().lower().replace(' ', '')
    if date_str in ('—Å–µ–≥–æ–¥–Ω—è', 'today', 'now', '—Ç—É–¥—ç–π'):
        date_str = datetime.now().strftime('%Y-%m-%d')
    try:
        y, m, d = map(int, date_str.split('-'))
        _ = calendar.timegm((y, m, d, 0, 0, 0))
        task['date'] = f"{y:04d}-{m:02d}-{d:02d}"
    except Exception as e:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_date, chat_id, thread_id, task)
        return
    task['visible'] = True
    task['id'] = get_next_task_id()
    try:
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
    except Exception:
        tasks = []
    tasks.append(task)
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_tasks_moder_panel(chat_id, thread_id, notice=f"–ó–∞–¥–∞–Ω–∏–µ '{task['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ –ø–æ–ª—è–º, —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É) ---
def show_task_moder_edit(chat_id, thread_id, task_id, page=0):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        show_tasks_moder_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", page=page)
        return
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"mod_edit_name_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"mod_edit_desc_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üí∞ –ù–∞–≥—Ä–∞–¥–∞", callback_data=f"mod_edit_reward_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üóì –î–∞—Ç–∞", callback_data=f"mod_edit_date_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"mod_edit_cat_{task_id}_p{page}")
    )
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mod_task_{task_id}_p{page}"))
    text = f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b> {task['name']}"
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)

# --- –†–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è (–ø–æ —à–∞–≥–∞–º) ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_edit_name_'))
def moder_edit_name(call):
    parts = call.data.split('_')
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_name, chat_id, thread_id, task_id, page)

def moder_save_edit_name(message, chat_id, thread_id, task_id, page):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    for t in tasks:
        if t['id'] == task_id:
            t['name'] = message.text.strip()
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_task_moder_card(chat_id, thread_id, task_id, page=page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_edit_desc_'))
def moder_edit_desc(call):
    parts = call.data.split('_')
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_desc, chat_id, thread_id, task_id, page)

def moder_save_edit_desc(message, chat_id, thread_id, task_id, page):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    for t in tasks:
        if t['id'] == task_id:
            t['desc'] = message.text.strip()
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_task_moder_card(chat_id, thread_id, task_id, page=page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_edit_reward_'))
def moder_edit_reward(call):
    parts = call.data.split('_')
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–Ω–∞–≥—Ä–∞–¥—É</b> (—á–∏—Å–ª–æ):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_reward, chat_id, thread_id, task_id, page)

def moder_save_edit_reward(message, chat_id, thread_id, task_id, page):
    try:
        reward = int(message.text.strip())
    except Exception:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_reward, chat_id, thread_id, task_id, page)
        return
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    for t in tasks:
        if t['id'] == task_id:
            t['reward'] = reward
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_task_moder_card(chat_id, thread_id, task_id, page=page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_edit_date_'))
def moder_edit_date(call):
    parts = call.data.split('_')
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–¥–∞—Ç—É</b> (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'):", parse_mode='HTML', message_thread_id=thread_id)
    bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_date, chat_id, thread_id, task_id, page)

def moder_save_edit_date(message, chat_id, thread_id, task_id, page):
    date_str = message.text.strip().lower().replace(' ', '')
    if date_str in ('—Å–µ–≥–æ–¥–Ω—è', 'today', 'now', '—Ç—É–¥—ç–π'):
        date_str = datetime.now().strftime('%Y-%m-%d')
    try:
        y, m, d = map(int, date_str.split('-'))
        _ = calendar.timegm((y, m, d, 0, 0, 0))
        date_val = f"{y:04d}-{m:02d}-{d:02d}"
    except Exception as e:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':", message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_save_edit_date, chat_id, thread_id, task_id, page)
        return
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    for t in tasks:
        if t['id'] == task_id:
            t['date'] = date_val
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_task_moder_card(chat_id, thread_id, task_id, page=page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_edit_cat_'))
def moder_edit_cat(call):
    parts = call.data.split('_')
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data=f"mod_setcat_daily_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data=f"mod_setcat_weekly_{task_id}_p{page}")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:", reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_setcat_'))
def moder_set_cat(call):
    parts = call.data.split('_')
    cat = parts[2]
    task_id = int(parts[3])
    page = int(parts[4][1:]) if len(parts) > 4 and parts[4].startswith('p') else 0
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    for t in tasks:
        if t['id'] == task_id:
            t['category'] = 'daily' if cat == 'daily' else 'weekly'
    with open('tasks.json', 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    show_task_moder_card(chat_id, thread_id, task_id, page=page)

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
TASKS_PER_PAGE = 5

def show_tasks_moder_panel(chat_id, thread_id, notice=None, page=0):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    tasks = sorted(tasks, key=lambda t: (t.get('date', ''), t['name']))
    total = len(tasks)
    start = page * TASKS_PER_PAGE
    end = start + TASKS_PER_PAGE
    page_tasks = tasks[start:end]
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    for task in page_tasks:
        btn_text = f"‚ùå {task['name']} (—Å–∫—Ä—ã—Ç–æ)" if not task.get('visible', True) else f"{task['name']}"
        markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=f"mod_task_{task['id']}_p{page}"))
    nav = []
    if start > 0:
        nav.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"mod_page_{page-1}"))
    if end < total:
        nav.append(telebot.types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"mod_page_{page+1}"))
    if nav:
        markup.add(*nav)
    markup.add(telebot.types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"mod_add_task_p{page}"))
    text = f"<b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: –∑–∞–¥–∞–Ω–∏—è</b>\n\n–ü–æ–∫–∞–∑–∞–Ω–æ {start+1}-{min(end,total)} –∏–∑ {total}."
    if notice:
        text = f"<b>{notice}</b>\n\n" + text
    msg = bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)

# --- –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ---
def show_task_moder_card(chat_id, thread_id, task_id, page=0):
    with open('tasks.json', 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    task = next((t for t in tasks if t['id'] == task_id), None)
    if not task:
        show_tasks_moder_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", page=page)
        return
    text = f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task['name']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['desc']}\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {'üïì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' if task['category']=='daily' else 'üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'}\n<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward']}\n<b>–î–∞—Ç–∞:</b> {task.get('date', '-')}\n<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ü–æ–∫–∞–∑–∞–Ω–æ' if task.get('visible', True) else '‚ùå –°–∫—Ä—ã—Ç–æ'}"
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"mod_edit_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"mod_delete_{task_id}_p{page}"),
        telebot.types.InlineKeyboardButton("üëÅ –°–∫—Ä—ã—Ç—å" if task.get('visible', True) else "üëÅ‚Äçüó® –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"mod_toggle_{task_id}_p{page}")
    )
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mod_back_p{page}"))
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML', message_thread_id=thread_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü ---
@bot.callback_query_handler(func=lambda call: call.message.chat.id == GROUP_ID and getattr(call.message, 'message_thread_id', None) == TASKS_PANEL_THREAD_ID and call.from_user.id in MODERATOR_IDS and call.data.startswith('mod_'))
def moder_tasks_callback(call):
    data = call.data
    chat_id = call.message.chat.id
    thread_id = call.message.message_thread_id
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if data.startswith('mod_page_'):
        page = int(data.split('_')[-1])
        show_tasks_moder_panel(chat_id, thread_id, page=page)
        return
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    if data.startswith('mod_add_task'):
        page = int(data.split('_p')[-1]) if '_p' in data else 0
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∑–∞–¥–∞–Ω–∏—è:", parse_mode='HTML', message_thread_id=thread_id)
        bot.register_next_step_handler_by_chat_id(chat_id, moder_add_task_name, chat_id, thread_id, {}, page)
        return
    # –ù–∞–∑–∞–¥
    if data.startswith('mod_back_p'):
        page = int(data.split('_p')[-1])
        show_tasks_moder_panel(chat_id, thread_id, page=page)
        return
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    if data.startswith('mod_task_'):
        parts = data.split('_')
        task_id = int(parts[2])
        page = int(parts[3][1:]) if len(parts) > 3 and parts[3].startswith('p') else 0
        show_task_moder_card(chat_id, thread_id, task_id, page=page)
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ
    if data.startswith('mod_delete_'):
        parts = data.split('_')
        task_id = int(parts[2])
        page = int(parts[3][1:]) if len(parts) > 3 and parts[3].startswith('p') else 0
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"mod_confirmdel_{task_id}_p{page}"))
        markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mod_task_{task_id}_p{page}"))
        bot.send_message(chat_id, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=markup, message_thread_id=thread_id)
        return
    if data.startswith('mod_confirmdel_'):
        parts = data.split('_')
        task_id = int(parts[2])
        page = int(parts[3][1:]) if len(parts) > 3 and parts[3].startswith('p') else 0
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        tasks = [t for t in tasks if t['id'] != task_id]
        with open('tasks.json', 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
        show_tasks_moder_panel(chat_id, thread_id, notice="–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", page=page)
        return
    # –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å
    if data.startswith('mod_toggle_'):
        parts = data.split('_')
        task_id = int(parts[2])
        page = int(parts[3][1:]) if len(parts) > 3 and parts[3].startswith('p') else 0
        with open('tasks.json', 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        for t in tasks:
            if t['id'] == task_id:
                t['visible'] = not t.get('visible', True)
        with open('tasks.json', 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
        show_task_moder_card(chat_id, thread_id, task_id, page=page)
        return
    # –ò–∑–º–µ–Ω–∏—Ç—å
    if data.startswith('mod_edit_'):
        parts = data.split('_')
        task_id = int(parts[2])
        page = int(parts[3][1:]) if len(parts) > 3 and parts[3].startswith('p') else 0
        show_task_moder_edit(chat_id, thread_id, task_id, page=page)
        return











if __name__ == "__main__":
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        bot.delete_webhook()
        print('Webhook —Å–±—Ä–æ—à–µ–Ω')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}')
    
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            error_msg = str(e)
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {error_msg}')
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {error_msg}')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)
            if '409' in error_msg or 'Conflict' in error_msg:
                print('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...')
                try:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    bot.delete_webhook()
                    updates = bot.get_updates()
                    if updates:
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        bot.get_updates(offset=updates[-1].update_id + 1)
                    print('–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...')
                    time.sleep(5)
                    continue
                except Exception as fix_error:
                    print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {fix_error}. –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥...')
                    time.sleep(30)
                    continue
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –∂–¥–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            print('–û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...')
            time.sleep(10) 